Ti$Sex <- as.numeric(Ti$Sex=="female")
library(tidyverse)
library(corrplot)
library(dbplyr)
library(MuMIn)
library(grf)
#Causal Forest (Special case of 'Generalized random forest')
cfA <- causal_forest(X = Ti[,c("Age", "Fare")], Y = Ti$Survived, W = Ti$Sex)
EcfA <- average_treatment_effect(cfA)
average_partial_effect(cfA)
average_treatment_effect(cfA)
average_partial_effect(cfA)
library(tidyverse)
library(readxl)
library(writexl)
ad_sk_200101_201231 <- read_csv("~/Mime et Moi/Data/SKU/ad_SKU_200101-201231.csv", skip =2)
ad_sk_current <- read_csv("~/Mime et Moi/Data/SKU/ad_SKU_210101-210331.csv", skip =2)
ad_sk <- rbind(ad_sk_200101_201231, ad_sk_current)
rm(ad_sk_200101_201231, ad_sk_current)
ad_sk <- ad_sk %>%
select(31, 43:55) %>%
select(-c("Currency")) %>%
rename(date="Day", name="Ad", campaign = "Campaign", campaignType = 'Campaign type', adID='Ad ID', adType="Ad type",
impressions = "Impressions", cost = "Cost", conversions = "Conversions", cValue="Conv. value", clicks = "Clicks",
year = "Year", adGroup = "Ad group") %>%
filter(campaignType != "Shopping")
ad_sk <- mutate(ad_sk, SKU=case_when(campaignType=="Shopping" ~ as.character(adID),
grepl("SKU", name) ~ gsub(".*SKU_", "", name)))
ad_sk$SKU <- gsub("; .*","",ad_sk$SKU)
ad_sk$SKU[is.na(ad_sk$SKU)] <- "Brand"
ad_sk <- mutate(ad_sk, GorFB = "Google", JaNeinBranche = if_else(SKU=="Brand", "Ist Brand", "Ist SKU"))
ad_skShopping_200101_201231 <- read_csv("~/Mime et Moi/Data/SKU/ad_SKU_Shopping_200101-201231.csv", skip = 2)
ad_skShopping_current <- read_csv("~/Mime et Moi/Data/SKU/ad_SKU_Shopping_210101-210331.csv", skip = 2)
ad_skShopping <- rbind(ad_skShopping_200101_201231, ad_skShopping_current)
rm(ad_skShopping_200101_201231, ad_skShopping_current)
ad_skShopping <- ad_skShopping %>%
select(-c("Currency")) %>%
rename(date="Day", campaign = "Campaign", campaignType = 'Campaign type', SKU = "Item ID",
impressions = "Impressions", cost = "Cost", conversions = "Conversions", cValue="Conv. value", clicks = "Clicks",
year = "Year") %>%
mutate(adID=NA, adType=NA, adGroup = NA, name=NA, JaNeinBranche = "Ist SKU", GorFB = "Google")
fb_sk_200101_200630 <- read_csv("~/Mime et Moi/Data/SKU/fb_SKU_200101-200630.csv", skip =0)
fb_sk_200701_201231 <- read_csv("~/Mime et Moi/Data/SKU/fb_SKU_200701-201231.csv", skip =0)
fb_sk_current <- read_csv("~/Mime et Moi/Data/SKU/fb_SKU_210101-210331.csv", skip =0)
fb_sk_current <- read_csv("~/Mime et Moi/Data/SKU/fb_SKU_210101-210331.csv", skip =0)
fb_sk <- rbind(fb_sk_200101_200630, fb_sk_200701_201231, fb_sk_current)
rm(fb_sk_200101_200630, fb_sk_200701_201231, fb_sk_current)
fb_sk <- fb_sk %>%
select(-starts_with("Reporting")) %>%
rename(date="Day", adID = "Ad ID", name = "Ad Name", adID = "Ad ID" , campaign = "Campaign Name",
impressions = "Impressions", cost = "Amount Spent (EUR)", conversions = "Purchases",
cValue = "Purchases Conversion Value", clicks = "Clicks (All)", adGroup = "Ad Set Name")
fb_sk <- mutate(fb_sk, SKU=case_when(grepl("Brand", name) ~ "Brand",
grepl("SKU", name) ~ gsub(".*SKU_", "", name)))
fb_sk <- mutate(fb_sk, year = substr(date, 1, 4), GorFB = "Facebook", adType = "fb", campaignType = "fb",
JaNeinBranche = if_else(SKU=="Brand", "Ist Brand", "Ist SKU"))
fb_sk$SKU <- gsub(" - Kopie","",fb_sk$SKU)
sk <- rbind(ad_sk, fb_sk, ad_skShopping)
sk <- sk %>%
mutate(month = substr(date, 6, 7), day = substr(date, 9, 10))
s_rm <- function(x) { #function to remove the shoe-size
if (is.na(x)==FALSE){
y = substr(x, nchar(x)-1, nchar(x))
if (y=="26"||y=="27" ||y=="28" ||y=="29"||y=="30"||y=="31"||y=="32"||y=="34"||y=="35"||y=="36"||y=="37"||y=="38"
||y=="39"||y=="40"||y=="41"||y=="42"||y=="43"||y=="44"||y=="45"||y=="46"||y=="47"||y=="48") {
result <-  substr(x, 1, nchar(x)-2)
}
else {result <-  x}
}
else {result <- x}
return(result)
}
sk$SKU <- sapply(sk$SKU, s_rm)
sum(filter(ad_sk, date >= as.Date("2021-01-01") & date <= as.Date("2021-01-31"))$cost)
sum(filter(fb_sk, date >= as.Date("2021-01-01") & date <= as.Date("2021-01-31"))$cost)
sum(filter(ad_skShopping, date >= as.Date("2021-01-01") & date <= as.Date("2021-01-31"))$cost)
a_Sho <- filter(ad_skShopping, date >= as.Date("2021-01-06") & date <= as.Date("2021-01-31"))
write_xlsx(sk, "~/Mime et Moi/R/Pivot SKU 200101-210331.xlsx")
library(tidyverse)
library(readxl)
library(writexl)
#Data Aquisition
#download report under fb business manager with the name "Pivot Butdgeteffizienz?bersicht Tim" unter Werbeanzeigenbericht
fb_bP_190101_201231 <- read_csv("~/Mime et Moi/Data/Budgeteffizienzuebersicht/fb Pivot-Butdgeteffizienzuebersicht-Tim 190101-201231.csv"
, skip =0)
fb_bP_current <- read_csv("~/Mime et Moi/Data/Budgeteffizienzuebersicht/fb Pivot-Butdgeteffizienzuebersicht-Tim 210101-210331.csv"
, skip =0)
fb_bP_current <- read_csv("~/Mime et Moi/Data/Budgeteffizienzuebersicht/fb Pivot-Butdgeteffizienzuebersicht-Tim 210101-210331.csv"
, skip =0)
fb_bP_current <- read_csv("~/Mime et Moi/Data/Budgeteffizienzuebersicht/fb Pivot-Butdgeteffizienzuebersicht-Tim 210101-210331.csv"
, skip =0)
fb_bP <- rbind(fb_bP_190101_201231, fb_bP_current)
rm(fb_bP_190101_201231, fb_bP_current)
fb_bP <- fb_bP %>%
mutate(GorFB = "FaceBook") %>%
rename(Kampagne = 'Campaign Name', dateRaw=Month, Klicks = 'Clicks (All)', Kosten = 'Amount Spent (EUR)',
Konv.Wert = 'Website Purchases Conversion Value', Konv. = Purchases, Impressionen = Impressions) %>%
mutate(monatNum = substr(dateRaw, 6, 7), Jahr = substr(dateRaw, 1, 4), Kampagnentyp = "fb", Anzeigentyp = "fb",
vonXpose = if_else(grepl("xps", Kampagne), "Xpose", "Wir")) %>%
select(-starts_with("Reporting")) %>%
filter(Impressionen > 0)
fb_bP$Konv.[is.na(fb_bP$Konv.)] <- 0
ad_bP_190101_201231 <- read_csv("~/Mime et Moi/Data/Budgeteffizienzuebersicht/Ads Pivot Butdgeteffizienzuebersicht Tim 190101-201231.csv",
skip = 2)
#die Variable Conv.-Wert beschreibt den Wert aller Konversionen, sie ist identisch mit der Variable 'Wert aller Conv'
ad_bP_current <- read_csv("~/Mime et Moi/Data/Budgeteffizienzuebersicht/Ads Pivot Butdgeteffizienzuebersicht Tim 210101-210228.csv",
skip = 2)
ad_bP <- rbind(ad_bP_190101_201231, ad_bP_current)
rm(ad_bP_190101_201231, ad_bP_current)
ad_bP <- ad_bP %>%
select(-c("Currency")) %>%
rename(dateRaw = Day, Konv.=Conversions, Konv.Wert = 'Conv. value', Kampagne = Campaign,
Kampagnentyp = "Campaign type", Jahr = "Year", Impressionen = "Impressions", Klicks = "Clicks",
Kosten = "Cost", Anzeigentyp = "Ad type") %>%
mutate(GorFB = "Google", vonXpose = if_else(grepl("xps", Kampagne), "Xpose", "Wir"),
Jahr = format(dateRaw, '%Y'), monatNum = format(dateRaw, '%m')) %>%
filter(Impressionen > 0)
bP <- rbind.data.frame(fb_bP, ad_bP)
#checking
sum(filter(ad_bP, Jahr=="2021", monatNum == "02")$Kosten)
sum(filter(fb_bP, Jahr=="2021", monatNum == "02")$Kosten)
a <- filter(bP, bP$monatNum == "02", bP$Jahr == "2021")
sum(a$Kosten)
write_xlsx(bP, "~/Mime et Moi/R/Pivot Butdgeteffizienzuebersicht Tim 190101-210228.xlsx")
write_xlsx(bP, "~/Mime et Moi/R/Pivot Butdgeteffizienzuebersicht Tim 190101-210331.xlsx")
library(tidyverse)
library(readxl)
library(writexl)
ad_sk_200101_201231 <- read_csv("~/Mime et Moi/Data/SKU/ad_SKU_200101-201231.csv", skip =2)
ad_sk_current <- read_csv("~/Mime et Moi/Data/SKU/ad_SKU_210101-210430.csv", skip =2)
ad_sk <- rbind(ad_sk_200101_201231, ad_sk_current)
rm(ad_sk_200101_201231, ad_sk_current)
ad_sk <- ad_sk %>%
select(31, 43:55) %>%
select(-c("Currency")) %>%
rename(date="Day", name="Ad", campaign = "Campaign", campaignType = 'Campaign type', adID='Ad ID', adType="Ad type",
impressions = "Impressions", cost = "Cost", conversions = "Conversions", cValue="Conv. value", clicks = "Clicks",
year = "Year", adGroup = "Ad group") %>%
filter(campaignType != "Shopping")
ad_sk <- mutate(ad_sk, SKU=case_when(campaignType=="Shopping" ~ as.character(adID),
grepl("SKU", name) ~ gsub(".*SKU_", "", name)))
ad_sk$SKU <- gsub("; .*","",ad_sk$SKU)
ad_sk$SKU[is.na(ad_sk$SKU)] <- "Brand"
ad_sk <- mutate(ad_sk, GorFB = "Google", JaNeinBranche = if_else(SKU=="Brand", "Ist Brand", "Ist SKU"))
ad_skShopping_200101_201231 <- read_csv("~/Mime et Moi/Data/SKU/ad_SKU_Shopping_200101-201231.csv", skip = 2)
ad_skShopping_current <- read_csv("~/Mime et Moi/Data/SKU/ad_SKU_Shopping_210101-210430.csv", skip = 2)
ad_skShopping <- rbind(ad_skShopping_200101_201231, ad_skShopping_current)
rm(ad_skShopping_200101_201231, ad_skShopping_current)
ad_skShopping <- ad_skShopping %>%
select(-c("Currency")) %>%
rename(date="Day", campaign = "Campaign", campaignType = 'Campaign type', SKU = "Item ID",
impressions = "Impressions", cost = "Cost", conversions = "Conversions", cValue="Conv. value", clicks = "Clicks",
year = "Year") %>%
mutate(adID=NA, adType=NA, adGroup = NA, name=NA, JaNeinBranche = "Ist SKU", GorFB = "Google")
fb_sk_200101_200630 <- read_csv("~/Mime et Moi/Data/SKU/fb_SKU_200101-200630.csv", skip =0)
fb_sk_200701_201231 <- read_csv("~/Mime et Moi/Data/SKU/fb_SKU_200701-201231.csv", skip =0)
fb_sk_current <- read_csv("~/Mime et Moi/Data/SKU/fb_SKU_210101-210430.csv", skip =0)
fb_sk <- rbind(fb_sk_200101_200630, fb_sk_200701_201231, fb_sk_current)
rm(fb_sk_200101_200630, fb_sk_200701_201231, fb_sk_current)
fb_sk <- fb_sk %>%
select(-starts_with("Reporting")) %>%
rename(date="Day", adID = "Ad ID", name = "Ad Name", adID = "Ad ID" , campaign = "Campaign Name",
impressions = "Impressions", cost = "Amount Spent (EUR)", conversions = "Purchases",
cValue = "Purchases Conversion Value", clicks = "Clicks (All)", adGroup = "Ad Set Name")
fb_sk <- mutate(fb_sk, SKU=case_when(grepl("Brand", name) ~ "Brand",
grepl("SKU", name) ~ gsub(".*SKU_", "", name)))
fb_sk <- mutate(fb_sk, year = substr(date, 1, 4), GorFB = "Facebook", adType = "fb", campaignType = "fb",
JaNeinBranche = if_else(SKU=="Brand", "Ist Brand", "Ist SKU"))
fb_sk$SKU <- gsub(" - Kopie","",fb_sk$SKU)
sk <- rbind(ad_sk, fb_sk, ad_skShopping)
sk <- sk %>%
mutate(month = substr(date, 6, 7), day = substr(date, 9, 10))
s_rm <- function(x) { #function to remove the shoe-size
if (is.na(x)==FALSE){
y = substr(x, nchar(x)-1, nchar(x))
if (y=="26"||y=="27" ||y=="28" ||y=="29"||y=="30"||y=="31"||y=="32"||y=="34"||y=="35"||y=="36"||y=="37"||y=="38"
||y=="39"||y=="40"||y=="41"||y=="42"||y=="43"||y=="44"||y=="45"||y=="46"||y=="47"||y=="48") {
result <-  substr(x, 1, nchar(x)-2)
}
else {result <-  x}
}
else {result <- x}
return(result)
}
sk$SKU <- sapply(sk$SKU, s_rm)
#checking
sum(filter(sk, date >= as.Date("2021-04-01") & date <= as.Date("2021-04-30"))$cost)
sum(filter(ad_sk, date >= as.Date("2021-04-01") & date <= as.Date("2021-04-30"))$cost)
sum(filter(fb_sk, date >= as.Date("2021-04-01") & date <= as.Date("2021-04-30"))$cost)
sum(filter(ad_skShopping, date >= as.Date("2021-04-01") & date <= as.Date("2021-04-30"))$cost)
#Data Aquisition
#download report under fb business manager with the name "Pivot Butdgeteffizienz?bersicht Tim" unter Werbeanzeigenbericht
fb_bP_190101_201231 <- read_csv("~/Mime et Moi/Data/Budgeteffizienzuebersicht/fb Pivot-Butdgeteffizienzuebersicht-Tim 190101-201231.csv"
, skip =0)
fb_bP_current <- read_csv("~/Mime et Moi/Data/Budgeteffizienzuebersicht/fb Pivot-Butdgeteffizienzuebersicht-Tim 210101-210430.csv"
, skip =0)
fb_bP <- rbind(fb_bP_190101_201231, fb_bP_current)
rm(fb_bP_190101_201231, fb_bP_current)
fb_bP <- fb_bP %>%
mutate(GorFB = "FaceBook") %>%
rename(Kampagne = 'Campaign Name', dateRaw=Month, Klicks = 'Clicks (All)', Kosten = 'Amount Spent (EUR)',
Konv.Wert = 'Website Purchases Conversion Value', Konv. = Purchases, Impressionen = Impressions) %>%
mutate(monatNum = substr(dateRaw, 6, 7), Jahr = substr(dateRaw, 1, 4), Kampagnentyp = "fb", Anzeigentyp = "fb",
vonXpose = if_else(grepl("xps", Kampagne), "Xpose", "Wir")) %>%
select(-starts_with("Reporting")) %>%
filter(Impressionen > 0)
fb_bP$Konv.[is.na(fb_bP$Konv.)] <- 0
ad_bP_190101_201231 <- read_csv("~/Mime et Moi/Data/Budgeteffizienzuebersicht/Ads Pivot Butdgeteffizienzuebersicht Tim 190101-201231.csv",
skip = 2)
#die Variable Conv.-Wert beschreibt den Wert aller Konversionen, sie ist identisch mit der Variable 'Wert aller Conv'
ad_bP_current <- read_csv("~/Mime et Moi/Data/Budgeteffizienzuebersicht/Ads Pivot Butdgeteffizienzuebersicht Tim 210101-210430.csv",
skip = 2)
ad_bP <- rbind(ad_bP_190101_201231, ad_bP_current)
rm(ad_bP_190101_201231, ad_bP_current)
ad_bP <- ad_bP %>%
select(-c("Currency")) %>%
rename(dateRaw = Day, Konv.=Conversions, Konv.Wert = 'Conv. value', Kampagne = Campaign,
Kampagnentyp = "Campaign type", Jahr = "Year", Impressionen = "Impressions", Klicks = "Clicks",
Kosten = "Cost", Anzeigentyp = "Ad type") %>%
mutate(GorFB = "Google", vonXpose = if_else(grepl("xps", Kampagne), "Xpose", "Wir"),
Jahr = format(dateRaw, '%Y'), monatNum = format(dateRaw, '%m')) %>%
filter(Impressionen > 0)
bP <- rbind.data.frame(fb_bP, ad_bP)
#checking
sum(filter(ad_bP, Jahr=="2021", monatNum == "04")$Kosten)
sum(filter(fb_bP, Jahr=="2021", monatNum == "04")$Kosten)
a <- filter(bP, bP$monatNum == "02", bP$Jahr == "2021")
sum(a$Kosten)
a <- filter(bP, bP$monatNum == "04", bP$Jahr == "2021")
sum(a$Kosten)
write_xlsx(bP, "~/Mime et Moi/R/Pivot Butdgeteffizienzuebersicht Tim 190101-210430.xlsx")
write_xlsx(bP, "~/Mime et Moi/R/Pivot Butdgeteffizienzuebersicht Tim 190101-210430.xlsx")
write_xlsx(sk, "~/Mime et Moi/R/Pivot SKU 200101-210430.xlsx")
#checking
sum(filter(sk, date >= as.Date("2021-04-01") & date <= as.Date("2021-04-30"))$cost)
a <- filter(bP, bP$monatNum == "04", bP$Jahr == "2021")
sum(a$Kosten)
setwd("~/GitHub/BAna-DS")
ohie <- readRDS("OHIE_Wrangled.RDS")
set.seed(1111)
index <- sample(x=c(1:length(ohie$person_id)), size=trunc(length(ohie$person_id)*0.7), replace = FALSE)
train <- ohie[index,]
test <- ohie[-index,]
View(ohie)
names(train)
d <- "charge_total"
?lm
#dependent variable: charge_total <- includes all charges and food assistance is not paid for by insurance
ohieVariables <- ohie(-c("person_id"))
#dependent variable: charge_total <- includes all charges and food assistance is not paid for by insurance
ohieVariables <- ohie[-c("person_id")]
#dependent variable: charge_total <- includes all charges and food assistance is not paid for by insurance
ohieVariables <- ohie[,-c("person_id")]
?select
#dependent variable: charge_total <- includes all charges and food assistance is not paid for by insurance
ohieVariables <- select(ohie,!c("person_id"))
#dependent variable: charge_total <- includes all charges and food assistance is not paid for by insurance
ohieVariables <- select(ohie,!c("person_id", "treatment", "dt_retro_coverage", "numhh_list", "numhh_list", "ed_charge_total"))
set.seed(1111)
index <- sample(x=c(1:length(ohie$person_id)), size=trunc(length(ohie$person_id)*0.7), replace = FALSE)
train <- ohieVariables[index,]
test <- ohieVariables[-index,]
#Initial linear regression----
m.lm <- lm(d ~ ., train)
str(train)
View(train)
ohieVariables_noNA <- drop_na(ohieVariables)
ohieVariables_nNA <- drop_na(ohieVariables)
train_nNA <- ohieVariables_nNA[index,]
test_nNA <- ohieVariables_nNA[-index,]
#Initial linear regression----
m.lm <- lm(d ~ ., train_nNA)
#Initial linear regression----
m.lm <- lm(charge_total ~ ., train_nNA)
rm(d, ohieVariables_noNA)
summary(m.lm)
?rmse
install.packages("Metrics")
library(Metrics)
?rmse
#Data----
setwd("~/GitHub/BAna-DS")
ohie <- readRDS("OHIE_Wrangled.RDS")
#dependent variable: charge_total <- includes all charges and food assistance is not paid for by insurance
ohieVariables <- select(ohie,!c("person_id", "treatment", "dt_retro_coverage", "numhh_list", "numhh_list", "ed_charge_total"))
ohieVariables_nNA <- drop_na(ohieVariables)
set.seed(1111)
index <- sample(x=c(1:length(ohie$person_id)), size=trunc(length(ohie$person_id)*0.7), replace = FALSE)
train <- ohieVariables[index,]
test <- ohieVariables[-index,]
train_nNA <- ohieVariables_nNA[index,]
test_nNA <- ohieVariables_nNA[-index,]
#Initial linear regression----
m.lm <- lm(charge_total ~ ., train_nNA)
library(tidyverse)
#dependent variable: charge_total <- includes all charges and food assistance is not paid for by insurance
ohieVariables <- select(ohie,!c("person_id", "treatment", "dt_retro_coverage", "numhh_list", "numhh_list", "ed_charge_total"))
ohieVariables_nNA <- drop_na(ohieVariables)
set.seed(1111)
index <- sample(x=c(1:length(ohie$person_id)), size=trunc(length(ohie$person_id)*0.7), replace = FALSE)
train <- ohieVariables[index,]
test <- ohieVariables[-index,]
train_nNA <- ohieVariables_nNA[index,]
test_nNA <- ohieVariables_nNA[-index,]
#Initial linear regression----
m.lm <- lm(charge_total ~ ., train_nNA)
p.lm <- predict.lm(m.lm, newdata = test)
view(p.lm)
p.lm <- predict.lm(m.lm, newdata = test_nNA)
rmse(test$charge_total, p.lm)
rmse(test_nNA$charge_total, p.lm)
sqrt(rmse(test_nNA$charge_total, p.lm))
View(train_nNA)
View(test_nNA)
View(train_nNA)
train_nNA <- ohieVariables_nNA[index,]
View(train_nNA)
ohieVariables_nNA <- drop_na(ohieVariables)
View(ohieVariables_nNA)
train_nNA <- ohieVariables_nNA[index,]
View(train_nNA)
table(ohieVariables_nNA$zip_msa_list)
a <- ohieVariables_nNA[index,]
index_nNA <- sample(x=c(1:length(ohieVariables_nNA$zip_msa_list)), size=trunc(length(ohieVariables_nNA$zip_msa_list)*0.7),
replace = FALSE)
train_nNA <- ohieVariables_nNA[index,]
test_nNA <- ohieVariables_nNA[-index,]
train_nNA <- ohieVariables_nNA[index_nNA,]
test_nNA <- ohieVariables_nNA[-index_nNA,]
#Initial linear regression----
m.lm <- lm(charge_total ~ ., train_nNA)
p.lm <- predict.lm(m.lm, newdata = test_nNA)
rmse(test_nNA$charge_total, p.lm)
sqrt(rmse(test_nNA$charge_total, p.lm))
library(tree)
#Initial tree based methods----
m.tr <- tree(charge_total ~ ., train_nNA)
?predict
p.tr <- predict(m.tr, newdata = test_nNA)
rmse(test_nNA$charge_total, p.tr)
library(randomForest)
#Random forest
m.fo <- randomForest(charge_total ~ ., train_nNA)
p.fo <- predict(m.fo, newdata = test_nNA)
rmse(test_nNA$charge_total, p.fo)
?randomForest
#Random forest
m.fo <- randomForest(charge_total ~ ., train_nNA, ntree = 2000)
p.fo <- predict(m.fo, newdata = test_nNA)
rmse(test_nNA$charge_total, p.fo) #[1] 16290.72
help(package = "randomForest")
install.packages("e1071")
library(e1071)
m.sv <- svm(charge_total ~ ., train_nNA)
library(Metrics)
library(tidyverse)
library(tree)
library(randomForest)
#Data----
setwd("~/GitHub/BAna-DS")
ohie <- readRDS("OHIE_Wrangled.RDS")
#dependent variable: charge_total <- includes all charges and food assistance is not paid for by insurance
ohieVariables <- select(ohie,!c("person_id", "treatment", "dt_retro_coverage", "numhh_list", "numhh_list", "ed_charge_total"))
ohieVariables_nNA <- drop_na(ohieVariables)
set.seed(1111)
index <- sample(x=c(1:length(ohie$person_id)), size=trunc(length(ohie$person_id)*0.7), replace = FALSE)
train <- ohieVariables[index,]
test <- ohieVariables[-index,]
set.seed(1111)
index_nNA <- sample(x=c(1:length(ohieVariables_nNA$zip_msa_list)), size=trunc(length(ohieVariables_nNA$zip_msa_list)*0.7),
replace = FALSE)
train_nNA <- ohieVariables_nNA[index_nNA,]
test_nNA <- ohieVariables_nNA[-index_nNA,]
#Initial linear regression----
m.lm <- lm(charge_total ~ ., train_nNA)
p.lm <- predict.lm(m.lm, newdata = test_nNA)
rmse(test_nNA$charge_total, p.lm) #[1] 16683.13 #sqrt==129.1632
#Single Tree
m.tr <- tree(charge_total ~ ., train_nNA)
p.tr <- predict(m.tr, newdata = test_nNA)
rmse(test_nNA$charge_total, p.tr) #[1] 16882.36
#Random forest
m.fo <- randomForest(charge_total ~ ., train_nNA, ntree = 2000)
p.fo <- predict(m.fo, newdata = test_nNA)
rmse(test_nNA$charge_total, p.fo) #[1] 16265.83
m.sv <- svm(charge_total ~ ., train_nNA)
p.sv <- predict(m.sv, newdata = test_nNA)
rmse(test_nNA$charge_total, p.sv)
table(ohieVariables_nNA$zip_msa_list)
?(package = MuMIn)
help(package = MuMIn)
dred.lm <- dredge(global.model = m.lm)
library(MuMIn)
dred.lm <- dredge(global.model = m.lm)
?dredge
#Initial linear regression----
m.lm <- lm(charge_total ~ ., train_nNA, na.action = "na.fail")
p.lm <- predict.lm(m.lm, newdata = test_nNA)
rmse(test_nNA$charge_total, p.lm) #[1] 16709.41
dred.lm <- dredge(global.model = m.lm)
system.time(result <- lm(charge_total ~ ., train_nNA, na.action = "na.fail"))
?system.time
#dependent variable: charge_total <- includes all charges and food assistance is not paid for by insurance
ohieVariables <- select(ohie,!c("person_id", "treatment", "dt_retro_coverage", "numhh_list", "numhh_list",
"ed_charge_total", "zip_msa_list")) #zip_msa_list would generally work as predictor but it
#contains only one possible value, which renders it useless for actual predictions
ohieVariables_nNA <- drop_na(ohieVariables)
set.seed(1111)
index <- sample(x=c(1:length(ohie$person_id)), size=trunc(length(ohie$person_id)*0.7), replace = FALSE)
train <- ohieVariables[index,]
test <- ohieVariables[-index,]
set.seed(1111)
index_nNA <- sample(x=c(1:length(ohieVariables_nNA$zip_msa_list)), size=trunc(length(ohieVariables_nNA$zip_msa_list)*0.7),
replace = FALSE)
train_nNA <- ohieVariables_nNA[index_nNA,]
test_nNA <- ohieVariables_nNA[-index_nNA,]
cor_ohieVariables_nNA <- cor(ohieVariables_nNA)
str(ohieVariables)
View(ohieVariables)
#dependent variable: charge_total <- includes all charges and food assistance is not paid for by insurance
ohieVariables <- ohie %>%
select(!c("person_id", "treatment", "dt_retro_coverage", "numhh_list", "numhh_list",
"ed_charge_total", "zip_msa_list")) %>%  #zip_msa_list would generally work as predictor but it
#contains only one possible value, which renders it useless for actual predictions
ohieVariables$sex <- as.numeric(ohieVariables$sex=="Female")
#dependent variable: charge_total <- includes all charges and food assistance is not paid for by insurance
ohieVariables <- ohie %>%
select(!c("person_id", "treatment", "dt_retro_coverage", "numhh_list", "numhh_list",
"ed_charge_total", "zip_msa_list"))  #zip_msa_list would generally work as predictor but it
ohieVariables$sex <- as.numeric(ohieVariables$sex=="Female")
str(as.numeric(ohieVariables))
ohieVariables_nNA <- drop_na(ohieVariables)
set.seed(1111)
index_nNA <- sample(x=c(1:length(ohieVariables_nNA$zip_msa_list)), size=trunc(length(ohieVariables_nNA$zip_msa_list)*0.7),
replace = FALSE)
train_nNA <- ohieVariables_nNA[index_nNA,]
test_nNA <- ohieVariables_nNA[-index_nNA,]
cor_ohieVariables_nNA <- cor(ohieVariables_nNA)
View(cor_ohieVariables_nNA)
library(corrplot)
corplot_ohieVariables_nNA <- corrplot(ohieVariables_nNA)
?corrplot
corplot_ohieVariables_nNA <- corrplot(corr = cor_ohieVariables_nNA)
View(ohieVariables)
names(ohieVariables)
a = names(ohieVariables)
view(a)
#without logical values in conditional branches of survey
m.lm_nl <- lm(charge_total ~ preperiod_any_visits + age + sex + any_ed_visits + any_ed_chronic_condition +
any_ed_injury + any_ed_skin_condition + any_ed_abdominal_pain + any_ed_back_pain +
any_ed_heart_or_chest_pain + any_ed_headache + any_ed_depression +
any_ed_psychiatric_condition_or_substance_abuse + charge_food_assistance +
charge_temporary_assistance, train_nNA, na.action = "na.fail")
View(train_nNA)
View(ohieVariables)
ohieVariables_nNA <- drop_na(ohieVariables)
set.seed(1111)
index_nNA <- sample(x=c(1:length(ohieVariables_nNA$zip_msa_list)), size=trunc(length(ohieVariables_nNA$zip_msa_list)*0.7),
replace = FALSE)
index_nNA <- sample(x=c(1:length(ohieVariables_nNA$age)), size=trunc(length(ohieVariables_nNA$age)*0.7),
replace = FALSE)
train_nNA <- ohieVariables_nNA[index_nNA,]
test_nNA <- ohieVariables_nNA[-index_nNA,]
#without logical values in conditional branches of survey
m.lm_nl <- lm(charge_total ~ preperiod_any_visits + age + sex + any_ed_visits + any_ed_chronic_condition +
any_ed_injury + any_ed_skin_condition + any_ed_abdominal_pain + any_ed_back_pain +
any_ed_heart_or_chest_pain + any_ed_headache + any_ed_depression +
any_ed_psychiatric_condition_or_substance_abuse + charge_food_assistance +
charge_temporary_assistance, train_nNA, na.action = "na.fail")
p.lm_nl <- predict.lm(m.lm_nl, newdata = test_nNA)
rmse(test_nNA$charge_total, p.lm_nl)
#without numerical values in conditional branches of survey
m.lm_nn <- lm(charge_total ~ preperiod_any_visits + age + sex + any_ed_visits + any_ed_chronic_condition +
any_ed_injury + any_ed_skin_condition + any_ed_abdominal_pain + any_ed_back_pain +
any_ed_heart_or_chest_pain + any_ed_headache + any_ed_depression +
any_ed_psychiatric_condition_or_substance_abuse + food_assistance +
temporary_assistance, train_nNA, na.action = "na.fail")
p.lm_nn <- predict.lm(m.lm_nn, newdata = test_nNA)
rmse(test_nNA$charge_total, p.lm_nn) #
#Initial linear regression----
m.lm <- lm(charge_total ~ ., train_nNA, na.action = "na.fail")
p.lm <- predict.lm(m.lm, newdata = test_nNA)
rmse(test_nNA$charge_total, p.lm) #[1] 16709.41
#without logical values in conditional branches of survey
m.fo_nl <- randomForest(charge_total ~ preperiod_any_visits + age + sex + any_ed_visits + any_ed_chronic_condition +
any_ed_injury + any_ed_skin_condition + any_ed_abdominal_pain + any_ed_back_pain +
any_ed_heart_or_chest_pain + any_ed_headache + any_ed_depression +
any_ed_psychiatric_condition_or_substance_abuse + charge_food_assistance +
charge_temporary_assistance, train_nNA, na.action = "na.fail")
p.fo_nl <- predict(m.fo_nl, newdata = test_nNA)
rmse(test_nNA$charge_total, p.fo_nl) #
#without numerical values in conditional branches of survey
m.fo_nn <- randomForest(charge_total ~ preperiod_any_visits + age + sex + any_ed_visits + any_ed_chronic_condition +
any_ed_injury + any_ed_skin_condition + any_ed_abdominal_pain + any_ed_back_pain +
any_ed_heart_or_chest_pain + any_ed_headache + any_ed_depression +
any_ed_psychiatric_condition_or_substance_abuse + food_assistance +
temporary_assistance, train_nNA, na.action = "na.fail")
p.fo_nn <- predict(m.fo_nn, newdata = test_nNA)
rmse(test_nNA$charge_total, p.fo_nn)
sqrt(16659.06)
m.sv_nn <- svm(charge_total ~ preperiod_any_visits + age + sex + any_ed_visits + any_ed_chronic_condition +
any_ed_injury + any_ed_skin_condition + any_ed_abdominal_pain + any_ed_back_pain +
any_ed_heart_or_chest_pain + any_ed_headache + any_ed_depression +
any_ed_psychiatric_condition_or_substance_abuse + food_assistance +
temporary_assistance, train_nNA)
p.sv_nn <- predict(m.sv_nn, newdata = test_nNA)
rmse(test_nNA$charge_total, p.sv_nn) #
format(Sys.time(), "%S")
Sys.time()
Sys.time()
dred.lm <- dredge(global.model = m.lm_nn) #should take between 32 and 44 minutes
Sys.time()
