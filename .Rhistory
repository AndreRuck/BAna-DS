any_ed_injury + any_ed_skin_condition + any_ed_abdominal_pain + any_ed_back_pain +
any_ed_heart_or_chest_pain + any_ed_headache + any_ed_depression +
any_ed_psychiatric_condition_or_substance_abuse + food_assistance +
temporary_assistance, train_nNA)
p.sv_nn <- predict(m.sv_nn, newdata = test_nNA)
rmse(test_nNA$charge_total, p.sv_nn) #[1] 17439.04
Possible further algorithms----
ossible further algorithms----
#support vecor machiene <- mainly used for classification problems, but regression can also be done
Possible further algorithms----
#support vecor machiene <- mainly used for classification problems, but regression can also be done
#do not yet know about usefullness in this setting
Possible further algorithms----
#support vecor machiene <- mainly used for classification problems, but regression can also be done
#do not yet know about usefullness in this setting
#neural nets
ossible further algorithms----
#support vecor machiene <- mainly used for classification problems, but regression can also be done
#do not yet know about usefullness in this setting
#neural nets
#extensions to linear model:
#Possible further algorithms----
#support vecor machiene <- mainly used for classification problems, but regression can also be done
#do not yet know about usefullness in this setting
#neural nets
#extensions to linear model:
#interaction terms
View(dred.lm)
?dredge
head(dred.lm)
#model with highest AICc
m.lm_aic <- lm(charge_total ~ age + temporary_assistance, train_nNA, na.action = "na.fail")
p.lm_aic <- predict.lm(m.lm_nn, newdata = test_nNA)
p.lm_aic <- predict.lm(m.lm_aic, newdata = test_nNA)
p.lm_aic <- predict.lm(m.lm_aic, newdata = test_nNA)
rmse(test_nNA$charge_total, p.lm_aic) #
#model with highest AICc
m.lm_aic <- lm(charge_total ~ preperiod_any_visits + age + sex + any_ed_visits + any_ed_chronic_condition +
any_ed_injury + any_ed_skin_condition + any_ed_abdominal_pain + any_ed_back_pain +
any_ed_heart_or_chest_pain + any_ed_headache + any_ed_depression + charge_food_assistance +
charge_temporary_assistance, train_nNA, train_nNA, na.action = "na.fail")
#model with highest AICc
m.lm_aic <- lm(charge_total ~ preperiod_any_visits + age + sex + any_ed_visits + any_ed_chronic_condition +
any_ed_injury + any_ed_skin_condition + any_ed_abdominal_pain + any_ed_back_pain +
any_ed_heart_or_chest_pain + any_ed_headache + any_ed_depression + charge_food_assistance +
charge_temporary_assistance, train_nNA, train_nNA, na.action = "na.fail")
rm(m.lm_aic)
#model with highest AICc
m.lm_aic <- lm(charge_total ~ preperiod_any_visits + age + sex + any_ed_visits + any_ed_chronic_condition +
any_ed_injury + any_ed_skin_condition + any_ed_abdominal_pain + any_ed_back_pain +
any_ed_heart_or_chest_pain + any_ed_headache + any_ed_depression + charge_food_assistance +
charge_temporary_assistance, train_nNA, train_nNA, na.action = "na.fail")
#model with highest AICc
m.lm_aic <- lm(charge_total ~ preperiod_any_visits + age + sex + any_ed_visits + any_ed_chronic_condition +
any_ed_injury + any_ed_skin_condition + any_ed_abdominal_pain + any_ed_back_pain +
any_ed_heart_or_chest_pain + any_ed_headache + any_ed_depression + charge_food_assistance +
charge_temporary_assistance, train_nNA, na.action = "na.fail")
p.lm_aic <- predict.lm(m.lm_aic, newdata = test_nNA)
rmse(test_nNA$charge_total, p.lm_aic) #[1] 19546.31
View(m.lm_aic)
#features that were used in the model with the highest AIC
m.fo_aic <- randomForest(charge_total ~ preperiod_any_visits + age + sex + any_ed_visits + any_ed_chronic_condition +
any_ed_injury + any_ed_skin_condition + any_ed_abdominal_pain + any_ed_back_pain +
any_ed_heart_or_chest_pain + any_ed_headache + any_ed_depression + charge_food_assistance +
charge_temporary_assistance, train_nNA, na.action = "na.fail")
p.fo_aic <- predict.lm(m.fo_aic, newdata = test_nNA)
rmse(test_nNA$charge_total, p.fo_aic)
p.fo_aic <- predict(m.fo_aic, newdata = test_nNA)
rmse(test_nNA$charge_total, p.fo_aic)
sqrt(16550.61)
#features that were used in the model with the highest AIC in lm
m.sv_aic <- svm(charge_total ~ preperiod_any_visits + age + sex + any_ed_visits + any_ed_chronic_condition +
any_ed_injury + any_ed_skin_condition + any_ed_abdominal_pain + any_ed_back_pain +
any_ed_heart_or_chest_pain + any_ed_headache + any_ed_depression + charge_food_assistance +
charge_temporary_assistance, train_nNA, na.action = "na.fail")
#features that were used in the model with the highest AIC in lm
m.sv_aic <- svm(charge_total ~ preperiod_any_visits + age + sex + any_ed_visits + any_ed_chronic_condition +
any_ed_injury + any_ed_skin_condition + any_ed_abdominal_pain + any_ed_back_pain +
any_ed_heart_or_chest_pain + any_ed_headache + any_ed_depression + charge_food_assistance +
charge_temporary_assistance, train_nNA, na.action = "na.fail")
#features that were used in the model with the highest AIC in lm
m.sv_aic <- svm(charge_total ~ preperiod_any_visits + age + sex + any_ed_visits + any_ed_chronic_condition +
any_ed_injury + any_ed_skin_condition + any_ed_abdominal_pain + any_ed_back_pain +
any_ed_heart_or_chest_pain + any_ed_headache + any_ed_depression + charge_food_assistance +
charge_temporary_assistance, train_nNA)
p.sv_aic <- predict(m.sv_aic, newdata = test_nNA)
rmse(test_nNA$charge_total, p.sv_aic) #
#adding interaction terms with variable sex to highest AICc model
m.lm_it <- lm(charge_total ~ preperiod_any_visits + age + sex + any_ed_visits + any_ed_chronic_condition +
any_ed_injury + any_ed_skin_condition + any_ed_abdominal_pain + any_ed_back_pain +
any_ed_heart_or_chest_pain + any_ed_headache + any_ed_depression + charge_food_assistance +
charge_temporary_assistance, sex:any_ed_headache, train_nNA, na.action = "na.fail")
#adding interaction terms with variable sex to highest AICc model
m.lm_it <- lm(charge_total ~ preperiod_any_visits + age + sex + any_ed_visits + any_ed_chronic_condition +
any_ed_injury + any_ed_skin_condition + any_ed_abdominal_pain + any_ed_back_pain +
any_ed_heart_or_chest_pain + any_ed_headache + any_ed_depression + charge_food_assistance +
charge_temporary_assistance, sex:any_ed_headache, train_nNA)
#adding interaction terms with variable sex to highest AICc model
m.lm_it <- lm(charge_total ~ preperiod_any_visits + age + sex + any_ed_visits + any_ed_chronic_condition +
any_ed_injury + any_ed_skin_condition + any_ed_abdominal_pain + any_ed_back_pain +
any_ed_heart_or_chest_pain + any_ed_headache + any_ed_depression + charge_food_assistance +
charge_temporary_assistance + sex:any_ed_headache, train_nNA)
p.lm_it <- predict.lm(m.lm_it, newdata = test_nNA)
rmse(test_nNA$charge_total, p.lm_it) #
#adding interaction terms with variable sex to highest AICc model
m.lm_it <- lm(charge_total ~ preperiod_any_visits + age + sex + any_ed_visits + any_ed_chronic_condition +
any_ed_injury + any_ed_skin_condition + any_ed_abdominal_pain + any_ed_back_pain +
any_ed_heart_or_chest_pain + any_ed_headache + any_ed_depression + charge_food_assistance +
charge_temporary_assistance + sex:any_ed_headache + sex:any_ed_depression, train_nNA)
p.lm_it <- predict.lm(m.lm_it, newdata = test_nNA)
rmse(test_nNA$charge_total, p.lm_it) #
#adding interaction terms with variable sex to highest AICc model
m.lm_it <- lm(charge_total ~ preperiod_any_visits + age + sex + any_ed_visits + any_ed_chronic_condition +
any_ed_injury + any_ed_skin_condition + any_ed_abdominal_pain + any_ed_back_pain +
any_ed_heart_or_chest_pain + any_ed_headache + any_ed_depression + charge_food_assistance +
charge_temporary_assistance + sex:any_ed_headache + sex:preperiod_any_visits, train_nNA)
p.lm_it <- predict.lm(m.lm_it, newdata = test_nNA)
rmse(test_nNA$charge_total, p.lm_it) #
#adding interaction terms with variable sex to highest AICc model
m.lm_it <- lm(charge_total ~ preperiod_any_visits + age + sex + any_ed_visits + any_ed_chronic_condition +
any_ed_injury + any_ed_skin_condition + any_ed_abdominal_pain + any_ed_back_pain +
any_ed_heart_or_chest_pain + any_ed_headache + any_ed_depression + charge_food_assistance +
charge_temporary_assistance + sex:any_ed_headache + sex:preperiod_any_visits +
sex:age, train_nNA)
p.lm_it <- predict.lm(m.lm_it, newdata = test_nNA)
rmse(test_nNA$charge_total, p.lm_it) #
#adding interaction terms with variable sex to highest AICc model
m.lm_it <- lm(charge_total ~ preperiod_any_visits + age + sex + any_ed_visits + any_ed_chronic_condition +
any_ed_injury + any_ed_skin_condition + any_ed_abdominal_pain + any_ed_back_pain +
any_ed_heart_or_chest_pain + any_ed_headache + any_ed_depression + charge_food_assistance +
charge_temporary_assistance + sex:any_ed_headache + sex:preperiod_any_visits +
sex:age, sex:any_ed_visits, train_nNA)
#adding interaction terms with variable sex to highest AICc model
m.lm_it <- lm(charge_total ~ preperiod_any_visits + age + sex + any_ed_visits + any_ed_chronic_condition +
any_ed_injury + any_ed_skin_condition + any_ed_abdominal_pain + any_ed_back_pain +
any_ed_heart_or_chest_pain + any_ed_headache + any_ed_depression + charge_food_assistance +
charge_temporary_assistance + sex:any_ed_headache + sex:preperiod_any_visits +
sex:age + sex:any_ed_visits, train_nNA)
p.lm_it <- predict.lm(m.lm_it, newdata = test_nNA)
rmse(test_nNA$charge_total, p.lm_it) #
#adding interaction terms with variable sex to highest AICc model
m.lm_it <- lm(charge_total ~ preperiod_any_visits + age + sex + any_ed_visits + any_ed_chronic_condition +
any_ed_injury + any_ed_skin_condition + any_ed_abdominal_pain + any_ed_back_pain +
any_ed_heart_or_chest_pain + any_ed_headache + any_ed_depression + charge_food_assistance +
charge_temporary_assistance + sex:any_ed_headache + sex:preperiod_any_visits +
sex:age + sex:any_ed_visits + sex:any_ed_chronic_condition, train_nNA)
p.lm_it <- predict.lm(m.lm_it, newdata = test_nNA)
rmse(test_nNA$charge_total, p.lm_it) #
#adding interaction terms with variable sex to highest AICc model
m.lm_it <- lm(charge_total ~ preperiod_any_visits + age + sex + any_ed_visits + any_ed_chronic_condition +
any_ed_injury + any_ed_skin_condition + any_ed_abdominal_pain + any_ed_back_pain +
any_ed_heart_or_chest_pain + any_ed_headache + any_ed_depression + charge_food_assistance +
charge_temporary_assistance + sex:any_ed_headache + sex:preperiod_any_visits +
sex:age + sex:any_ed_visits + sex:any_ed_chronic_condition + sex:any_ed_injury, train_nNA)
p.lm_it <- predict.lm(m.lm_it, newdata = test_nNA)
rmse(test_nNA$charge_total, p.lm_it) #
#adding interaction terms with variable sex to highest AICc model
m.lm_it <- lm(charge_total ~ preperiod_any_visits + age + sex + any_ed_visits + any_ed_chronic_condition +
any_ed_injury + any_ed_skin_condition + any_ed_abdominal_pain + any_ed_back_pain +
any_ed_heart_or_chest_pain + any_ed_headache + any_ed_depression + charge_food_assistance +
charge_temporary_assistance + sex:any_ed_headache + sex:preperiod_any_visits +
sex:age + sex:any_ed_visits + sex:any_ed_chronic_condition + sex:any_ed_injury +
sex:any_ed_skin_condition, train_nNA)
p.lm_it <- predict.lm(m.lm_it, newdata = test_nNA)
rmse(test_nNA$charge_total, p.lm_it) #
#adding interaction terms with variable sex to highest AICc model
m.lm_it <- lm(charge_total ~ preperiod_any_visits + age + sex + any_ed_visits + any_ed_chronic_condition +
any_ed_injury + any_ed_skin_condition + any_ed_abdominal_pain + any_ed_back_pain +
any_ed_heart_or_chest_pain + any_ed_headache + any_ed_depression + charge_food_assistance +
charge_temporary_assistance + sex:any_ed_headache + sex:preperiod_any_visits +
sex:age + sex:any_ed_visits + sex:any_ed_chronic_condition + sex:any_ed_injury +
sex:any_ed_abdominal_pain, train_nNA)
p.lm_it <- predict.lm(m.lm_it, newdata = test_nNA)
rmse(test_nNA$charge_total, p.lm_it) #
#adding interaction terms with variable sex to highest AICc model
m.lm_it <- lm(charge_total ~ preperiod_any_visits + age + sex + any_ed_visits + any_ed_chronic_condition +
any_ed_injury + any_ed_skin_condition + any_ed_abdominal_pain + any_ed_back_pain +
any_ed_heart_or_chest_pain + any_ed_headache + any_ed_depression + charge_food_assistance +
charge_temporary_assistance + sex:any_ed_headache + sex:preperiod_any_visits +
sex:age + sex:any_ed_visits + sex:any_ed_chronic_condition + sex:any_ed_injury +
sex:any_ed_back_pain, train_nNA)
p.lm_it <- predict.lm(m.lm_it, newdata = test_nNA)
rmse(test_nNA$charge_total, p.lm_it) #
#adding interaction terms with variable sex to highest AICc model
m.lm_it <- lm(charge_total ~ preperiod_any_visits + age + sex + any_ed_visits + any_ed_chronic_condition +
any_ed_injury + any_ed_skin_condition + any_ed_abdominal_pain + any_ed_back_pain +
any_ed_heart_or_chest_pain + any_ed_headache + any_ed_depression + charge_food_assistance +
charge_temporary_assistance + sex:any_ed_headache + sex:preperiod_any_visits +
sex:age + sex:any_ed_visits + sex:any_ed_chronic_condition + sex:any_ed_injury +
sex:any_ed_back_pain + sex:any_ed_heart_or_chest_pain, train_nNA)
p.lm_it <- predict.lm(m.lm_it, newdata = test_nNA)
rmse(test_nNA$charge_total, p.lm_it) #
#adding interaction terms with variable sex to highest AICc model
m.lm_it <- lm(charge_total ~ preperiod_any_visits + age + sex + any_ed_visits + any_ed_chronic_condition +
any_ed_injury + any_ed_skin_condition + any_ed_abdominal_pain + any_ed_back_pain +
any_ed_heart_or_chest_pain + any_ed_headache + any_ed_depression + charge_food_assistance +
charge_temporary_assistance + sex:any_ed_headache + sex:preperiod_any_visits +
sex:age + sex:any_ed_visits + sex:any_ed_chronic_condition + sex:any_ed_injury +
sex:any_ed_back_pain + sex:charge_food_assistance, train_nNA)
p.lm_it <- predict.lm(m.lm_it, newdata = test_nNA)
rmse(test_nNA$charge_total, p.lm_it) #
#adding interaction terms with variable sex to highest AICc model
m.lm_it <- lm(charge_total ~ preperiod_any_visits + age + sex + any_ed_visits + any_ed_chronic_condition +
any_ed_injury + any_ed_skin_condition + any_ed_abdominal_pain + any_ed_back_pain +
any_ed_heart_or_chest_pain + any_ed_headache + any_ed_depression + charge_food_assistance +
charge_temporary_assistance + sex:any_ed_headache + sex:preperiod_any_visits +
sex:age + sex:any_ed_visits + sex:any_ed_chronic_condition + sex:any_ed_injury +
sex:any_ed_back_pain + sex:charge_charge_temporary_assistance, train_nNA)
p.lm_it <- predict.lm(m.lm_it, newdata = test_nNA)
rmse(test_nNA$charge_total, p.lm_it) #
#adding interaction terms with variable sex to highest AICc model
m.lm_it <- lm(charge_total ~ preperiod_any_visits + age + sex + any_ed_visits + any_ed_chronic_condition +
any_ed_injury + any_ed_skin_condition + any_ed_abdominal_pain + any_ed_back_pain +
any_ed_heart_or_chest_pain + any_ed_headache + any_ed_depression + charge_food_assistance +
charge_temporary_assistance + sex:any_ed_headache + sex:preperiod_any_visits +
sex:age + sex:any_ed_visits + sex:any_ed_chronic_condition + sex:any_ed_injury +
sex:any_ed_back_pain, train_nNA)
p.lm_it <- predict.lm(m.lm_it, newdata = test_nNA)
rmse(test_nNA$charge_total, p.lm_it) #
#adding esxplicit interactions, namely those interactions with sex that were found to be helpful in the lm model
m.fo_it <- lm(charge_total ~ preperiod_any_visits + age + sex + any_ed_visits + any_ed_chronic_condition +
any_ed_injury + any_ed_skin_condition + any_ed_abdominal_pain + any_ed_back_pain +
any_ed_heart_or_chest_pain + any_ed_headache + any_ed_depression + charge_food_assistance +
charge_temporary_assistance + sex:any_ed_headache + sex:preperiod_any_visits +
sex:age + sex:any_ed_visits + sex:any_ed_chronic_condition + sex:any_ed_injury +
sex:any_ed_back_pain, train_nNA)
#adding esxplicit interactions, namely those interactions with sex that were found to be helpful in the lm model
m.fo_it <- randomForest(charge_total ~ preperiod_any_visits + age + sex + any_ed_visits + any_ed_chronic_condition +
any_ed_injury + any_ed_skin_condition + any_ed_abdominal_pain + any_ed_back_pain +
any_ed_heart_or_chest_pain + any_ed_headache + any_ed_depression + charge_food_assistance +
charge_temporary_assistance + sex:any_ed_headache + sex:preperiod_any_visits +
sex:age + sex:any_ed_visits + sex:any_ed_chronic_condition + sex:any_ed_injury +
sex:any_ed_back_pain, train_nNA)
p.lm_fo <- predict(m.fo_it, newdata = test_nNA)
rmse(test_nNA$charge_total, p.lm_fo)
table(c("charge_total", "preperiod_any_visits", "age", "sex", "any_ed_visits", "any_ed_chronic_condition", "any_ed_injury",
"any_ed_skin_condition", "any_ed_abdominal_pain", "any_ed_back_pain", "any_ed_heart_or_chest_pain", "any_ed_headache",
"any_ed_depression", "any_ed_psychiatric_condition_or_substance_abuse", "food_assistance", "charge_food_assistance",
"temporary_assistance", "charge_temporary_assistance", "charge_total", "preperiod_any_visits", "age", "sex", "any_ed_visits",
"any_ed_chronic_condition", "any_ed_injury", "any_ed_skin_condition", "any_ed_abdominal_pain", "any_ed_back_pain",
"any_ed_heart_or_chest_pain", "any_ed_headache", "any_ed_depression", "charge_food_assistance", "charge_temporary_assistance"))
"temporary_assistance"))
ohieVariables_nNA2 <- drop_na(select(ohieVariables, !c("any_ed_psychiatric_condition_or_substance_abuse", "food_assistance",
"temporary_assistance")))
ohieVariables_nNA2 <- drop_na(ohieVariables2)
#dataframe with variables removed, that showed to decrease model performance
ohieVariables2 <- select(ohieVariables, !c("any_ed_psychiatric_condition_or_substance_abuse", "food_assistance",
"temporary_assistance"))
ohieVariables_nNA2 <- drop_na(ohieVariables2)
?randomForest
?cran_stats
install.packages("dlstats")
library(dlstats)
a <- cran_stats(c("MICE", "Amelia", "missForest", "Hmisc", "mi"))
View(a)
?cran_stats
if (!is.null(a)) {
head(a)
ggplot(a, aes(end, downloads, group=package, color=package)) +
geom_line() + geom_point(aes(shape=package))
}
?with
install.packages("Hmisc")
library(Hmisc)
?rmse
metrics::rmse(test_nNA$charge_total, p.lm_aic) #[1] 16700.77
modelr::rmse(test_nNA$charge_total, p.lm_aic) #[1] 16700.77
?drop_na
View(ohieVariables)
#mean substitution (with Hmisc)
ohieVariables_DepnNA <- drop_na(ohieVariables, any_of(charge_total))
#mean substitution (with Hmisc)
ohieVariables_DepnNA <- drop_na(ohieVariables, any_of("charge_total"))
save(dred.lm, "dred.lm")
#Data----
setwd("~/GitHub/BAna-DS")
save(dred.lm, "dred.lm")
save(dred.lm, "~/GitHub/BAna-DS/dred.lm")
save(dred.lm, "~/GitHub/BAna-DS")
save(dred.lm, file = "~/GitHub/BAna-DS/dred.lm")
save(dred.lm, file = "~/GitHub/BAna-DS/dredlm.RData")
saveRDS(dred.lm, file = "~/GitHub/BAna-DS/dredlm.rds")
library(Metrics)
library(tidyverse)
library(corrplot)
library(Hmisc)
library(dlstats) #package to check download statistics of packages
library(tree)
library(randomForest)
library(e1071)
library(MuMIn)
#Data----
setwd("~/GitHub/BAna-DS")
ohie <- readRDS("OHIE_Wrangled.RDS")
#dependent variable: charge_total <- includes all charges and food assistance is not paid for by insurance
formula <- "charge_total ~ preperiod_any_visits + age + sex + any_ed_visits + any_ed_chronic_condition +
any_ed_injury + any_ed_skin_condition + any_ed_abdominal_pain + any_ed_back_pain +
any_ed_heart_or_chest_pain + any_ed_headache + any_ed_depression +
any_ed_psychiatric_condition_or_substance_abuse + food_assistance + charge_food_assistance +
temporary_assistance + charge_temporary_assistance"
#dataframe with all variables that could generally be included in the model
ohieVariables <- ohie %>%
select(!c("person_id", "treatment", "dt_retro_coverage", "numhh_list", "numhh_list",
"ed_charge_total", "zip_msa_list")) #zip_msa_list would generally work as predictor but it
ohieVariables$sex <- as.numeric(ohieVariables$sex=="Female")
#no imputation
set.seed(1111)
index <- sample(x=c(1:length(ohie$person_id)), size=trunc(length(ohie$person_id)*0.7), replace = FALSE)
train <- ohieVariables[index,]
test <- ohieVariables[-index,]
#listwise deletion
ohieVariables_nNA <- drop_na(ohieVariables)
#dataframe with variables removed, that showed to decrease model performance
ohieVariables2 <- select(ohieVariables, !c("any_ed_psychiatric_condition_or_substance_abuse", "food_assistance",
"temporary_assistance"))
ohieVariables_nNA2 <- drop_na(ohieVariables2)
#does not result in any more observations i.e. does not make a difference for model performance if
#imputation method is listwise deletion
set.seed(1111)
index_nNA <- sample(x=c(1:length(ohieVariables_nNA$age)), size=trunc(length(ohieVariables_nNA$age)*0.7),
replace = FALSE)
train_nNA <- ohieVariables_nNA[index_nNA,]
test_nNA <- ohieVariables_nNA[-index_nNA,]
ohieVariables_mean <-
#Exploration----
cor_ohieVariables_nNA <- cor(ohieVariables_nNA)
corplot_ohieVariables_nNA <- corrplot(corr = cor_ohieVariables_nNA)
library(gbm)
install.packages("gbm,")
install.packages("xgboost")
library(xgboost)
?xgb.cv
features_train_bt <- select(train_nNA, !c("any_ed_psychiatric_condition_or_substance_abuse", "food_assistance",
"temporary_assistance", "charge_total"))
m.bt <- xgb.cv(
data = features_train_bt,
label = train_nNA$charge_total,
nrounds = 1000,
nfold = 5,
objective = "reg:linear",  # for regression models
verbose = 0               # silent,
)
?select
features_train_bt <- matrix(select(train_nNA, !c("any_ed_psychiatric_condition_or_substance_abuse", "food_assistance",
"temporary_assistance", "charge_total")))
View(features_train_bt)
features_train_bt <- as.matrix(select(train_nNA, !c("any_ed_psychiatric_condition_or_substance_abuse", "food_assistance",
"temporary_assistance", "charge_total")))
View(features_train_bt)
#Initial model
set.seed(1111)
m.bt <- xgb.cv(
data = features_train_bt,
label = train_nNA$charge_total,
nrounds = 1000,
nfold = 5,
objective = "reg:linear",  # for regression models
verbose = 0               # silent,
)
#Initial model
set.seed(1111)
m.bt <- xgb.cv(
data = features_train_bt,
label = train_nNA$charge_total,
nrounds = 1000,
nfold = 5,
objective = "reg:squarederror",  # for regression models, linear is depreciated
verbose = 0               # silent,
)
View(m.bt)
p.bt <- predict(m.bt, newdata = test_nNA)
?predict
m.bt[["evaluation_log"]]
?xgb.cv
features_bt <- as.matrix(select(ohieVariables_nNA, !c("any_ed_psychiatric_condition_or_substance_abuse", "food_assistance",
"temporary_assistance", "charge_total")))
ohieVariables_DepnNA <- drop_na(ohieVariables, any_of("charge_total"))
#Initial model
Sys.time()
set.seed(1111)
m.bt <- xgb.cv(
data = features_bt,
label = train_nNA$charge_total,
nrounds = 1400,
nfold = 5,    #one is for testing the rest is used for training
objective = "reg:squarederror",  # for regression models, linear is depreciated
verbose = 0   # silent,
)
Sys.time()
#Initial model
Sys.time()
set.seed(1111)
m.bt <- xgb.cv(
data = features_bt,
label = ohieVariables_nNA$charge_total,
nrounds = 1400,
nfold = 5,    #one is for testing the rest is used for training
objective = "reg:squarederror",  # for regression models, linear is depreciated
verbose = 0   # silent,
)
Sys.time()
View(features_train_bt)
View(m.bt)
m.bt[["evaluation_log"]]
#number of trees that minimize error
m.bt$evaluation_log %>%
dplyr::summarise(
ntrees.train = which(train_rmse_mean == min(train_rmse_mean))[1],
rmse.train   = min(train_rmse_mean),
ntrees.test  = which(test_rmse_mean == min(test_rmse_mean))[1],
rmse.test   = min(test_rmse_mean),
)
#number of trees that minimize error
m.bt$evaluation_log %>%
dplyr::summarise(
ntrees.train = which(train_rmse_mean == min(train_rmse_mean))[1],
rmse.train   = min(train_rmse_mean),
ntrees.test  = which(test_rmse_mean == min(test_rmse_mean))[1],
rmse.test   = min(test_rmse_mean),
)
# plot error vs number trees
ggplot(xgb.fit1$evaluation_log) +
geom_line(aes(iter, train_rmse_mean), color = "red") +
geom_line(aes(iter, test_rmse_mean), color = "blue")
# plot error vs number trees
ggplot(m.bt$evaluation_log) +
geom_line(aes(iter, train_rmse_mean), color = "red") +
geom_line(aes(iter, test_rmse_mean), color = "blue")
#Aci model
featuresBt_aci <- as.matrix(select(ohieVariables_nNA, !c("any_ed_psychiatric_condition_or_substance_abuse", "food_assistance",
"temporary_assistance", "charge_total")))
#Initial model
featuresBt <- as.matrix(select(ohieVariables_nNA, !c("charge_total")))
m.bt <- xgb.cv(
data = featuresBt,
label = ohieVariables_nNA$charge_total,
nrounds = 1400,
nfold = 5,    #one is for testing the rest is used for training
objective = "reg:squarederror",  # for regression models, linear is depreciated
verbose = 0   # silent,
)
View(m.bt)
m.bt[["evaluation_log"]]
#number of trees that minimize error
m.bt$evaluation_log %>%
dplyr::summarise(
ntrees.train = which(train_rmse_mean == min(train_rmse_mean))[1],
rmse.train   = min(train_rmse_mean),
ntrees.test  = which(test_rmse_mean == min(test_rmse_mean))[1],
rmse.test   = min(test_rmse_mean),
)
# plot error vs number trees
ggplot(m.bt$evaluation_log) +
geom_line(aes(iter, train_rmse_mean), color = "red") +
geom_line(aes(iter, test_rmse_mean), color = "blue")
?xgb.cv
for (i in 1:7)
{
1+1
}
1+1
?list
?vector
depthList_m.bt_aci <- vector(mode = "list", length = 8)
for (i in 1:8)
{
set.seed(1111)
depthList_m.bt_aci[i] <- 2*i
}
View(depthList_m.bt_aci)
i=1
depthList_m.bt_aci[i] <- xgb.cv(
data = featuresBt_aci,
label = ohieVariables_nNA$charge_total,
nrounds = 800,
nfold = 5,    #one is for testing the rest is used for training
objective = "reg:squarederror",  # for regression models, linear is depreciated
verbose = 0,   # silent,
max_depth = i)
View(depthList_m.bt_aci)
depthList_m.bt_aci[[1]]
depthList_m.bt_aci[i] <- xgb.cv(
data = featuresBt_aci,
label = ohieVariables_nNA$charge_total,
nrounds = 800,
nfold = 5,    #one is for testing the rest is used for training
objective = "reg:squarederror",  # for regression models, linear is depreciated
verbose = 0,   # silent,
)
?xgb.cv
View(depthList_m.bt_aci)
depthList_m.bt_aci <- vector(mode = "list", length = 8)
depthList_m.bt_aci[1] <- xgb.cv(
data = featuresBt_aci,
label = ohieVariables_nNA$charge_total,
nrounds = 800,
nfold = 5,    #one is for testing the rest is used for training
objective = "reg:squarederror",  # for regression models, linear is depreciated
verbose = 0)   # silent,
depthList_m.bt_aci[2] <- lm(charge_total ~ ., train_nNA, na.action = "na.fail")
View(depthList_m.bt_aci)
depthList_m.bt_aci[[2]] <- lm(charge_total ~ ., train_nNA, na.action = "na.fail")
View(depthList_m.bt_aci)
depthList_m.bt_aci[[1]] <- xgb.cv(
data = featuresBt_aci,
label = ohieVariables_nNA$charge_total,
nrounds = 800,
nfold = 5,    #one is for testing the rest is used for training
objective = "reg:squarederror",  # for regression models, linear is depreciated
verbose = 0)   # silent,
1|0
View(ohie)
