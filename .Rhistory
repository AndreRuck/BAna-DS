train <- ohieVariables[index,]
test <- ohieVariables[-index,]
set.seed(1111)
index_nNA <- sample(x=c(1:length(ohieVariables_nNA$zip_msa_list)), size=trunc(length(ohieVariables_nNA$zip_msa_list)*0.7),
replace = FALSE)
train_nNA <- ohieVariables_nNA[index_nNA,]
test_nNA <- ohieVariables_nNA[-index_nNA,]
#Initial linear regression----
m.lm <- lm(charge_total ~ ., train_nNA)
p.lm <- predict.lm(m.lm, newdata = test_nNA)
rmse(test_nNA$charge_total, p.lm) #[1] 16683.13 #sqrt==129.1632
#Single Tree
m.tr <- tree(charge_total ~ ., train_nNA)
p.tr <- predict(m.tr, newdata = test_nNA)
rmse(test_nNA$charge_total, p.tr) #[1] 16882.36
#Random forest
m.fo <- randomForest(charge_total ~ ., train_nNA, ntree = 2000)
p.fo <- predict(m.fo, newdata = test_nNA)
rmse(test_nNA$charge_total, p.fo) #[1] 16265.83
m.sv <- svm(charge_total ~ ., train_nNA)
p.sv <- predict(m.sv, newdata = test_nNA)
rmse(test_nNA$charge_total, p.sv)
table(ohieVariables_nNA$zip_msa_list)
?(package = MuMIn)
help(package = MuMIn)
dred.lm <- dredge(global.model = m.lm)
library(MuMIn)
dred.lm <- dredge(global.model = m.lm)
?dredge
#Initial linear regression----
m.lm <- lm(charge_total ~ ., train_nNA, na.action = "na.fail")
p.lm <- predict.lm(m.lm, newdata = test_nNA)
rmse(test_nNA$charge_total, p.lm) #[1] 16709.41
dred.lm <- dredge(global.model = m.lm)
system.time(result <- lm(charge_total ~ ., train_nNA, na.action = "na.fail"))
?system.time
#dependent variable: charge_total <- includes all charges and food assistance is not paid for by insurance
ohieVariables <- select(ohie,!c("person_id", "treatment", "dt_retro_coverage", "numhh_list", "numhh_list",
"ed_charge_total", "zip_msa_list")) #zip_msa_list would generally work as predictor but it
#contains only one possible value, which renders it useless for actual predictions
ohieVariables_nNA <- drop_na(ohieVariables)
set.seed(1111)
index <- sample(x=c(1:length(ohie$person_id)), size=trunc(length(ohie$person_id)*0.7), replace = FALSE)
train <- ohieVariables[index,]
test <- ohieVariables[-index,]
set.seed(1111)
index_nNA <- sample(x=c(1:length(ohieVariables_nNA$zip_msa_list)), size=trunc(length(ohieVariables_nNA$zip_msa_list)*0.7),
replace = FALSE)
train_nNA <- ohieVariables_nNA[index_nNA,]
test_nNA <- ohieVariables_nNA[-index_nNA,]
cor_ohieVariables_nNA <- cor(ohieVariables_nNA)
str(ohieVariables)
View(ohieVariables)
#dependent variable: charge_total <- includes all charges and food assistance is not paid for by insurance
ohieVariables <- ohie %>%
select(!c("person_id", "treatment", "dt_retro_coverage", "numhh_list", "numhh_list",
"ed_charge_total", "zip_msa_list")) %>%  #zip_msa_list would generally work as predictor but it
#contains only one possible value, which renders it useless for actual predictions
ohieVariables$sex <- as.numeric(ohieVariables$sex=="Female")
#dependent variable: charge_total <- includes all charges and food assistance is not paid for by insurance
ohieVariables <- ohie %>%
select(!c("person_id", "treatment", "dt_retro_coverage", "numhh_list", "numhh_list",
"ed_charge_total", "zip_msa_list"))  #zip_msa_list would generally work as predictor but it
ohieVariables$sex <- as.numeric(ohieVariables$sex=="Female")
str(as.numeric(ohieVariables))
ohieVariables_nNA <- drop_na(ohieVariables)
set.seed(1111)
index_nNA <- sample(x=c(1:length(ohieVariables_nNA$zip_msa_list)), size=trunc(length(ohieVariables_nNA$zip_msa_list)*0.7),
replace = FALSE)
train_nNA <- ohieVariables_nNA[index_nNA,]
test_nNA <- ohieVariables_nNA[-index_nNA,]
cor_ohieVariables_nNA <- cor(ohieVariables_nNA)
View(cor_ohieVariables_nNA)
library(corrplot)
corplot_ohieVariables_nNA <- corrplot(ohieVariables_nNA)
?corrplot
corplot_ohieVariables_nNA <- corrplot(corr = cor_ohieVariables_nNA)
View(ohieVariables)
names(ohieVariables)
a = names(ohieVariables)
view(a)
#without logical values in conditional branches of survey
m.lm_nl <- lm(charge_total ~ preperiod_any_visits + age + sex + any_ed_visits + any_ed_chronic_condition +
any_ed_injury + any_ed_skin_condition + any_ed_abdominal_pain + any_ed_back_pain +
any_ed_heart_or_chest_pain + any_ed_headache + any_ed_depression +
any_ed_psychiatric_condition_or_substance_abuse + charge_food_assistance +
charge_temporary_assistance, train_nNA, na.action = "na.fail")
View(train_nNA)
View(ohieVariables)
ohieVariables_nNA <- drop_na(ohieVariables)
set.seed(1111)
index_nNA <- sample(x=c(1:length(ohieVariables_nNA$zip_msa_list)), size=trunc(length(ohieVariables_nNA$zip_msa_list)*0.7),
replace = FALSE)
index_nNA <- sample(x=c(1:length(ohieVariables_nNA$age)), size=trunc(length(ohieVariables_nNA$age)*0.7),
replace = FALSE)
train_nNA <- ohieVariables_nNA[index_nNA,]
test_nNA <- ohieVariables_nNA[-index_nNA,]
#without logical values in conditional branches of survey
m.lm_nl <- lm(charge_total ~ preperiod_any_visits + age + sex + any_ed_visits + any_ed_chronic_condition +
any_ed_injury + any_ed_skin_condition + any_ed_abdominal_pain + any_ed_back_pain +
any_ed_heart_or_chest_pain + any_ed_headache + any_ed_depression +
any_ed_psychiatric_condition_or_substance_abuse + charge_food_assistance +
charge_temporary_assistance, train_nNA, na.action = "na.fail")
p.lm_nl <- predict.lm(m.lm_nl, newdata = test_nNA)
rmse(test_nNA$charge_total, p.lm_nl)
#without numerical values in conditional branches of survey
m.lm_nn <- lm(charge_total ~ preperiod_any_visits + age + sex + any_ed_visits + any_ed_chronic_condition +
any_ed_injury + any_ed_skin_condition + any_ed_abdominal_pain + any_ed_back_pain +
any_ed_heart_or_chest_pain + any_ed_headache + any_ed_depression +
any_ed_psychiatric_condition_or_substance_abuse + food_assistance +
temporary_assistance, train_nNA, na.action = "na.fail")
p.lm_nn <- predict.lm(m.lm_nn, newdata = test_nNA)
rmse(test_nNA$charge_total, p.lm_nn) #
#Initial linear regression----
m.lm <- lm(charge_total ~ ., train_nNA, na.action = "na.fail")
p.lm <- predict.lm(m.lm, newdata = test_nNA)
rmse(test_nNA$charge_total, p.lm) #[1] 16709.41
#without logical values in conditional branches of survey
m.fo_nl <- randomForest(charge_total ~ preperiod_any_visits + age + sex + any_ed_visits + any_ed_chronic_condition +
any_ed_injury + any_ed_skin_condition + any_ed_abdominal_pain + any_ed_back_pain +
any_ed_heart_or_chest_pain + any_ed_headache + any_ed_depression +
any_ed_psychiatric_condition_or_substance_abuse + charge_food_assistance +
charge_temporary_assistance, train_nNA, na.action = "na.fail")
p.fo_nl <- predict(m.fo_nl, newdata = test_nNA)
rmse(test_nNA$charge_total, p.fo_nl) #
#without numerical values in conditional branches of survey
m.fo_nn <- randomForest(charge_total ~ preperiod_any_visits + age + sex + any_ed_visits + any_ed_chronic_condition +
any_ed_injury + any_ed_skin_condition + any_ed_abdominal_pain + any_ed_back_pain +
any_ed_heart_or_chest_pain + any_ed_headache + any_ed_depression +
any_ed_psychiatric_condition_or_substance_abuse + food_assistance +
temporary_assistance, train_nNA, na.action = "na.fail")
p.fo_nn <- predict(m.fo_nn, newdata = test_nNA)
rmse(test_nNA$charge_total, p.fo_nn)
sqrt(16659.06)
m.sv_nn <- svm(charge_total ~ preperiod_any_visits + age + sex + any_ed_visits + any_ed_chronic_condition +
any_ed_injury + any_ed_skin_condition + any_ed_abdominal_pain + any_ed_back_pain +
any_ed_heart_or_chest_pain + any_ed_headache + any_ed_depression +
any_ed_psychiatric_condition_or_substance_abuse + food_assistance +
temporary_assistance, train_nNA)
p.sv_nn <- predict(m.sv_nn, newdata = test_nNA)
rmse(test_nNA$charge_total, p.sv_nn) #
format(Sys.time(), "%S")
Sys.time()
Sys.time()
dred.lm <- dredge(global.model = m.lm_nn) #should take between 32 and 44 minutes
Sys.time()
library(Metrics)
library(tidyverse)
library(corrplot)
library(tree)
library(randomForest)
library(e1071)
library(MuMIn)
#Data----
setwd("~/GitHub/BAna-DS")
ohie <- readRDS("OHIE_Wrangled.RDS")
#dependent variable: charge_total <- includes all charges and food assistance is not paid for by insurance
formula <- "charge_total ~ preperiod_any_visits + age + sex + any_ed_visits + any_ed_chronic_condition +
any_ed_injury + any_ed_skin_condition + any_ed_abdominal_pain + any_ed_back_pain +
any_ed_heart_or_chest_pain + any_ed_headache + any_ed_depression +
any_ed_psychiatric_condition_or_substance_abuse + food_assistance + charge_food_assistance +
temporary_assistance + charge_temporary_assistance"
ohieVariables <- ohie %>%
select(!c("person_id", "treatment", "dt_retro_coverage", "numhh_list", "numhh_list",
"ed_charge_total", "zip_msa_list")) #%>%  #zip_msa_list would generally work as predictor but it
ohieVariables$sex <- as.numeric(ohieVariables$sex=="Female")
ohieVariables_nNA <- drop_na(ohieVariables)
set.seed(1111)
index <- sample(x=c(1:length(ohie$person_id)), size=trunc(length(ohie$person_id)*0.7), replace = FALSE)
train <- ohieVariables[index,]
test <- ohieVariables[-index,]
set.seed(1111)
index_nNA <- sample(x=c(1:length(ohieVariables_nNA$age)), size=trunc(length(ohieVariables_nNA$age)*0.7),
replace = FALSE)
train_nNA <- ohieVariables_nNA[index_nNA,]
test_nNA <- ohieVariables_nNA[-index_nNA,]
cor_ohieVariables_nNA <- cor(ohieVariables_nNA)
corplot_ohieVariables_nNA <- corrplot(corr = cor_ohieVariables_nNA)
#Initial linear regression----
m.lm <- lm(charge_total ~ ., train_nNA, na.action = "na.fail")
#Multiple R-squared:  0.2681,	Adjusted R-squared:  0.2672     pretty bad...
p.lm <- predict.lm(m.lm, newdata = test_nNA)
rmse(test_nNA$charge_total, p.lm) #[1] 16709.41
#without logical values in conditional branches of survey
m.lm_nl <- lm(charge_total ~ preperiod_any_visits + age + sex + any_ed_visits + any_ed_chronic_condition +
any_ed_injury + any_ed_skin_condition + any_ed_abdominal_pain + any_ed_back_pain +
any_ed_heart_or_chest_pain + any_ed_headache + any_ed_depression +
any_ed_psychiatric_condition_or_substance_abuse + charge_food_assistance +
charge_temporary_assistance, train_nNA, na.action = "na.fail")
p.lm_nl <- predict.lm(m.lm_nl, newdata = test_nNA)
rmse(test_nNA$charge_total, p.lm_nl) #[1] 16700.6
#without numerical values in conditional branches of survey
m.lm_nn <- lm(charge_total ~ preperiod_any_visits + age + sex + any_ed_visits + any_ed_chronic_condition +
any_ed_injury + any_ed_skin_condition + any_ed_abdominal_pain + any_ed_back_pain +
any_ed_heart_or_chest_pain + any_ed_headache + any_ed_depression +
any_ed_psychiatric_condition_or_substance_abuse + food_assistance +
temporary_assistance, train_nNA, na.action = "na.fail")
p.lm_nn <- predict.lm(m.lm_nn, newdata = test_nNA)
rmse(test_nNA$charge_total, p.lm_nn) #[1] 16709.32
Sys.time()
dred.lm <- dredge(global.model = m.lm_nn) #should take between 32 and 44 minutes
Sys.time()
#Single Tree
m.tr <- tree(charge_total ~ ., train_nNA)
p.tr <- predict(m.tr, newdata = test_nNA)
rmse(test_nNA$charge_total, p.tr) #[1] 17029.64
#Random forest
m.fo <- randomForest(charge_total ~ ., train_nNA, ntree = 2000)
p.fo <- predict(m.fo, newdata = test_nNA)
rmse(test_nNA$charge_total, p.fo) #[1] 16834.86
#without logical values in conditional branches of survey
m.fo_nl <- randomForest(charge_total ~ preperiod_any_visits + age + sex + any_ed_visits + any_ed_chronic_condition +
any_ed_injury + any_ed_skin_condition + any_ed_abdominal_pain + any_ed_back_pain +
any_ed_heart_or_chest_pain + any_ed_headache + any_ed_depression +
any_ed_psychiatric_condition_or_substance_abuse + charge_food_assistance +
charge_temporary_assistance, train_nNA, na.action = "na.fail")
p.fo_nl <- predict(m.fo_nl, newdata = test_nNA)
rmse(test_nNA$charge_total, p.fo_nl) #[1] 16740.19
#without numerical values in conditional branches of survey
m.fo_nn <- randomForest(charge_total ~ preperiod_any_visits + age + sex + any_ed_visits + any_ed_chronic_condition +
any_ed_injury + any_ed_skin_condition + any_ed_abdominal_pain + any_ed_back_pain +
any_ed_heart_or_chest_pain + any_ed_headache + any_ed_depression +
any_ed_psychiatric_condition_or_substance_abuse + food_assistance +
temporary_assistance, train_nNA, na.action = "na.fail")
p.fo_nn <- predict(m.fo_nn, newdata = test_nNA)
rmse(test_nNA$charge_total, p.fo_nn) #[1] 16659.06 ;  sqrt=129.07
m.sv <- svm(charge_total ~ ., train_nNA)
p.sv <- predict(m.sv, newdata = test_nNA)
rmse(test_nNA$charge_total, p.sv) #[1] 20437.4
m.sv_nn <- svm(charge_total ~ preperiod_any_visits + age + sex + any_ed_visits + any_ed_chronic_condition +
any_ed_injury + any_ed_skin_condition + any_ed_abdominal_pain + any_ed_back_pain +
any_ed_heart_or_chest_pain + any_ed_headache + any_ed_depression +
any_ed_psychiatric_condition_or_substance_abuse + food_assistance +
temporary_assistance, train_nNA)
p.sv_nn <- predict(m.sv_nn, newdata = test_nNA)
rmse(test_nNA$charge_total, p.sv_nn) #[1] 17439.04
Possible further algorithms----
ossible further algorithms----
#support vecor machiene <- mainly used for classification problems, but regression can also be done
Possible further algorithms----
#support vecor machiene <- mainly used for classification problems, but regression can also be done
#do not yet know about usefullness in this setting
Possible further algorithms----
#support vecor machiene <- mainly used for classification problems, but regression can also be done
#do not yet know about usefullness in this setting
#neural nets
ossible further algorithms----
#support vecor machiene <- mainly used for classification problems, but regression can also be done
#do not yet know about usefullness in this setting
#neural nets
#extensions to linear model:
#Possible further algorithms----
#support vecor machiene <- mainly used for classification problems, but regression can also be done
#do not yet know about usefullness in this setting
#neural nets
#extensions to linear model:
#interaction terms
View(dred.lm)
?dredge
head(dred.lm)
#model with highest AICc
m.lm_aic <- lm(charge_total ~ age + temporary_assistance, train_nNA, na.action = "na.fail")
p.lm_aic <- predict.lm(m.lm_nn, newdata = test_nNA)
p.lm_aic <- predict.lm(m.lm_aic, newdata = test_nNA)
p.lm_aic <- predict.lm(m.lm_aic, newdata = test_nNA)
rmse(test_nNA$charge_total, p.lm_aic) #
#model with highest AICc
m.lm_aic <- lm(charge_total ~ preperiod_any_visits + age + sex + any_ed_visits + any_ed_chronic_condition +
any_ed_injury + any_ed_skin_condition + any_ed_abdominal_pain + any_ed_back_pain +
any_ed_heart_or_chest_pain + any_ed_headache + any_ed_depression + charge_food_assistance +
charge_temporary_assistance, train_nNA, train_nNA, na.action = "na.fail")
#model with highest AICc
m.lm_aic <- lm(charge_total ~ preperiod_any_visits + age + sex + any_ed_visits + any_ed_chronic_condition +
any_ed_injury + any_ed_skin_condition + any_ed_abdominal_pain + any_ed_back_pain +
any_ed_heart_or_chest_pain + any_ed_headache + any_ed_depression + charge_food_assistance +
charge_temporary_assistance, train_nNA, train_nNA, na.action = "na.fail")
rm(m.lm_aic)
#model with highest AICc
m.lm_aic <- lm(charge_total ~ preperiod_any_visits + age + sex + any_ed_visits + any_ed_chronic_condition +
any_ed_injury + any_ed_skin_condition + any_ed_abdominal_pain + any_ed_back_pain +
any_ed_heart_or_chest_pain + any_ed_headache + any_ed_depression + charge_food_assistance +
charge_temporary_assistance, train_nNA, train_nNA, na.action = "na.fail")
#model with highest AICc
m.lm_aic <- lm(charge_total ~ preperiod_any_visits + age + sex + any_ed_visits + any_ed_chronic_condition +
any_ed_injury + any_ed_skin_condition + any_ed_abdominal_pain + any_ed_back_pain +
any_ed_heart_or_chest_pain + any_ed_headache + any_ed_depression + charge_food_assistance +
charge_temporary_assistance, train_nNA, na.action = "na.fail")
p.lm_aic <- predict.lm(m.lm_aic, newdata = test_nNA)
rmse(test_nNA$charge_total, p.lm_aic) #[1] 19546.31
View(m.lm_aic)
#features that were used in the model with the highest AIC
m.fo_aic <- randomForest(charge_total ~ preperiod_any_visits + age + sex + any_ed_visits + any_ed_chronic_condition +
any_ed_injury + any_ed_skin_condition + any_ed_abdominal_pain + any_ed_back_pain +
any_ed_heart_or_chest_pain + any_ed_headache + any_ed_depression + charge_food_assistance +
charge_temporary_assistance, train_nNA, na.action = "na.fail")
p.fo_aic <- predict.lm(m.fo_aic, newdata = test_nNA)
rmse(test_nNA$charge_total, p.fo_aic)
p.fo_aic <- predict(m.fo_aic, newdata = test_nNA)
rmse(test_nNA$charge_total, p.fo_aic)
sqrt(16550.61)
#features that were used in the model with the highest AIC in lm
m.sv_aic <- svm(charge_total ~ preperiod_any_visits + age + sex + any_ed_visits + any_ed_chronic_condition +
any_ed_injury + any_ed_skin_condition + any_ed_abdominal_pain + any_ed_back_pain +
any_ed_heart_or_chest_pain + any_ed_headache + any_ed_depression + charge_food_assistance +
charge_temporary_assistance, train_nNA, na.action = "na.fail")
#features that were used in the model with the highest AIC in lm
m.sv_aic <- svm(charge_total ~ preperiod_any_visits + age + sex + any_ed_visits + any_ed_chronic_condition +
any_ed_injury + any_ed_skin_condition + any_ed_abdominal_pain + any_ed_back_pain +
any_ed_heart_or_chest_pain + any_ed_headache + any_ed_depression + charge_food_assistance +
charge_temporary_assistance, train_nNA, na.action = "na.fail")
#features that were used in the model with the highest AIC in lm
m.sv_aic <- svm(charge_total ~ preperiod_any_visits + age + sex + any_ed_visits + any_ed_chronic_condition +
any_ed_injury + any_ed_skin_condition + any_ed_abdominal_pain + any_ed_back_pain +
any_ed_heart_or_chest_pain + any_ed_headache + any_ed_depression + charge_food_assistance +
charge_temporary_assistance, train_nNA)
p.sv_aic <- predict(m.sv_aic, newdata = test_nNA)
rmse(test_nNA$charge_total, p.sv_aic) #
#adding interaction terms with variable sex to highest AICc model
m.lm_it <- lm(charge_total ~ preperiod_any_visits + age + sex + any_ed_visits + any_ed_chronic_condition +
any_ed_injury + any_ed_skin_condition + any_ed_abdominal_pain + any_ed_back_pain +
any_ed_heart_or_chest_pain + any_ed_headache + any_ed_depression + charge_food_assistance +
charge_temporary_assistance, sex:any_ed_headache, train_nNA, na.action = "na.fail")
#adding interaction terms with variable sex to highest AICc model
m.lm_it <- lm(charge_total ~ preperiod_any_visits + age + sex + any_ed_visits + any_ed_chronic_condition +
any_ed_injury + any_ed_skin_condition + any_ed_abdominal_pain + any_ed_back_pain +
any_ed_heart_or_chest_pain + any_ed_headache + any_ed_depression + charge_food_assistance +
charge_temporary_assistance, sex:any_ed_headache, train_nNA)
#adding interaction terms with variable sex to highest AICc model
m.lm_it <- lm(charge_total ~ preperiod_any_visits + age + sex + any_ed_visits + any_ed_chronic_condition +
any_ed_injury + any_ed_skin_condition + any_ed_abdominal_pain + any_ed_back_pain +
any_ed_heart_or_chest_pain + any_ed_headache + any_ed_depression + charge_food_assistance +
charge_temporary_assistance + sex:any_ed_headache, train_nNA)
p.lm_it <- predict.lm(m.lm_it, newdata = test_nNA)
rmse(test_nNA$charge_total, p.lm_it) #
#adding interaction terms with variable sex to highest AICc model
m.lm_it <- lm(charge_total ~ preperiod_any_visits + age + sex + any_ed_visits + any_ed_chronic_condition +
any_ed_injury + any_ed_skin_condition + any_ed_abdominal_pain + any_ed_back_pain +
any_ed_heart_or_chest_pain + any_ed_headache + any_ed_depression + charge_food_assistance +
charge_temporary_assistance + sex:any_ed_headache + sex:any_ed_depression, train_nNA)
p.lm_it <- predict.lm(m.lm_it, newdata = test_nNA)
rmse(test_nNA$charge_total, p.lm_it) #
#adding interaction terms with variable sex to highest AICc model
m.lm_it <- lm(charge_total ~ preperiod_any_visits + age + sex + any_ed_visits + any_ed_chronic_condition +
any_ed_injury + any_ed_skin_condition + any_ed_abdominal_pain + any_ed_back_pain +
any_ed_heart_or_chest_pain + any_ed_headache + any_ed_depression + charge_food_assistance +
charge_temporary_assistance + sex:any_ed_headache + sex:preperiod_any_visits, train_nNA)
p.lm_it <- predict.lm(m.lm_it, newdata = test_nNA)
rmse(test_nNA$charge_total, p.lm_it) #
#adding interaction terms with variable sex to highest AICc model
m.lm_it <- lm(charge_total ~ preperiod_any_visits + age + sex + any_ed_visits + any_ed_chronic_condition +
any_ed_injury + any_ed_skin_condition + any_ed_abdominal_pain + any_ed_back_pain +
any_ed_heart_or_chest_pain + any_ed_headache + any_ed_depression + charge_food_assistance +
charge_temporary_assistance + sex:any_ed_headache + sex:preperiod_any_visits +
sex:age, train_nNA)
p.lm_it <- predict.lm(m.lm_it, newdata = test_nNA)
rmse(test_nNA$charge_total, p.lm_it) #
#adding interaction terms with variable sex to highest AICc model
m.lm_it <- lm(charge_total ~ preperiod_any_visits + age + sex + any_ed_visits + any_ed_chronic_condition +
any_ed_injury + any_ed_skin_condition + any_ed_abdominal_pain + any_ed_back_pain +
any_ed_heart_or_chest_pain + any_ed_headache + any_ed_depression + charge_food_assistance +
charge_temporary_assistance + sex:any_ed_headache + sex:preperiod_any_visits +
sex:age, sex:any_ed_visits, train_nNA)
#adding interaction terms with variable sex to highest AICc model
m.lm_it <- lm(charge_total ~ preperiod_any_visits + age + sex + any_ed_visits + any_ed_chronic_condition +
any_ed_injury + any_ed_skin_condition + any_ed_abdominal_pain + any_ed_back_pain +
any_ed_heart_or_chest_pain + any_ed_headache + any_ed_depression + charge_food_assistance +
charge_temporary_assistance + sex:any_ed_headache + sex:preperiod_any_visits +
sex:age + sex:any_ed_visits, train_nNA)
p.lm_it <- predict.lm(m.lm_it, newdata = test_nNA)
rmse(test_nNA$charge_total, p.lm_it) #
#adding interaction terms with variable sex to highest AICc model
m.lm_it <- lm(charge_total ~ preperiod_any_visits + age + sex + any_ed_visits + any_ed_chronic_condition +
any_ed_injury + any_ed_skin_condition + any_ed_abdominal_pain + any_ed_back_pain +
any_ed_heart_or_chest_pain + any_ed_headache + any_ed_depression + charge_food_assistance +
charge_temporary_assistance + sex:any_ed_headache + sex:preperiod_any_visits +
sex:age + sex:any_ed_visits + sex:any_ed_chronic_condition, train_nNA)
p.lm_it <- predict.lm(m.lm_it, newdata = test_nNA)
rmse(test_nNA$charge_total, p.lm_it) #
#adding interaction terms with variable sex to highest AICc model
m.lm_it <- lm(charge_total ~ preperiod_any_visits + age + sex + any_ed_visits + any_ed_chronic_condition +
any_ed_injury + any_ed_skin_condition + any_ed_abdominal_pain + any_ed_back_pain +
any_ed_heart_or_chest_pain + any_ed_headache + any_ed_depression + charge_food_assistance +
charge_temporary_assistance + sex:any_ed_headache + sex:preperiod_any_visits +
sex:age + sex:any_ed_visits + sex:any_ed_chronic_condition + sex:any_ed_injury, train_nNA)
p.lm_it <- predict.lm(m.lm_it, newdata = test_nNA)
rmse(test_nNA$charge_total, p.lm_it) #
#adding interaction terms with variable sex to highest AICc model
m.lm_it <- lm(charge_total ~ preperiod_any_visits + age + sex + any_ed_visits + any_ed_chronic_condition +
any_ed_injury + any_ed_skin_condition + any_ed_abdominal_pain + any_ed_back_pain +
any_ed_heart_or_chest_pain + any_ed_headache + any_ed_depression + charge_food_assistance +
charge_temporary_assistance + sex:any_ed_headache + sex:preperiod_any_visits +
sex:age + sex:any_ed_visits + sex:any_ed_chronic_condition + sex:any_ed_injury +
sex:any_ed_skin_condition, train_nNA)
p.lm_it <- predict.lm(m.lm_it, newdata = test_nNA)
rmse(test_nNA$charge_total, p.lm_it) #
#adding interaction terms with variable sex to highest AICc model
m.lm_it <- lm(charge_total ~ preperiod_any_visits + age + sex + any_ed_visits + any_ed_chronic_condition +
any_ed_injury + any_ed_skin_condition + any_ed_abdominal_pain + any_ed_back_pain +
any_ed_heart_or_chest_pain + any_ed_headache + any_ed_depression + charge_food_assistance +
charge_temporary_assistance + sex:any_ed_headache + sex:preperiod_any_visits +
sex:age + sex:any_ed_visits + sex:any_ed_chronic_condition + sex:any_ed_injury +
sex:any_ed_abdominal_pain, train_nNA)
p.lm_it <- predict.lm(m.lm_it, newdata = test_nNA)
rmse(test_nNA$charge_total, p.lm_it) #
#adding interaction terms with variable sex to highest AICc model
m.lm_it <- lm(charge_total ~ preperiod_any_visits + age + sex + any_ed_visits + any_ed_chronic_condition +
any_ed_injury + any_ed_skin_condition + any_ed_abdominal_pain + any_ed_back_pain +
any_ed_heart_or_chest_pain + any_ed_headache + any_ed_depression + charge_food_assistance +
charge_temporary_assistance + sex:any_ed_headache + sex:preperiod_any_visits +
sex:age + sex:any_ed_visits + sex:any_ed_chronic_condition + sex:any_ed_injury +
sex:any_ed_back_pain, train_nNA)
p.lm_it <- predict.lm(m.lm_it, newdata = test_nNA)
rmse(test_nNA$charge_total, p.lm_it) #
#adding interaction terms with variable sex to highest AICc model
m.lm_it <- lm(charge_total ~ preperiod_any_visits + age + sex + any_ed_visits + any_ed_chronic_condition +
any_ed_injury + any_ed_skin_condition + any_ed_abdominal_pain + any_ed_back_pain +
any_ed_heart_or_chest_pain + any_ed_headache + any_ed_depression + charge_food_assistance +
charge_temporary_assistance + sex:any_ed_headache + sex:preperiod_any_visits +
sex:age + sex:any_ed_visits + sex:any_ed_chronic_condition + sex:any_ed_injury +
sex:any_ed_back_pain + sex:any_ed_heart_or_chest_pain, train_nNA)
p.lm_it <- predict.lm(m.lm_it, newdata = test_nNA)
rmse(test_nNA$charge_total, p.lm_it) #
#adding interaction terms with variable sex to highest AICc model
m.lm_it <- lm(charge_total ~ preperiod_any_visits + age + sex + any_ed_visits + any_ed_chronic_condition +
any_ed_injury + any_ed_skin_condition + any_ed_abdominal_pain + any_ed_back_pain +
any_ed_heart_or_chest_pain + any_ed_headache + any_ed_depression + charge_food_assistance +
charge_temporary_assistance + sex:any_ed_headache + sex:preperiod_any_visits +
sex:age + sex:any_ed_visits + sex:any_ed_chronic_condition + sex:any_ed_injury +
sex:any_ed_back_pain + sex:charge_food_assistance, train_nNA)
p.lm_it <- predict.lm(m.lm_it, newdata = test_nNA)
rmse(test_nNA$charge_total, p.lm_it) #
#adding interaction terms with variable sex to highest AICc model
m.lm_it <- lm(charge_total ~ preperiod_any_visits + age + sex + any_ed_visits + any_ed_chronic_condition +
any_ed_injury + any_ed_skin_condition + any_ed_abdominal_pain + any_ed_back_pain +
any_ed_heart_or_chest_pain + any_ed_headache + any_ed_depression + charge_food_assistance +
charge_temporary_assistance + sex:any_ed_headache + sex:preperiod_any_visits +
sex:age + sex:any_ed_visits + sex:any_ed_chronic_condition + sex:any_ed_injury +
sex:any_ed_back_pain + sex:charge_charge_temporary_assistance, train_nNA)
p.lm_it <- predict.lm(m.lm_it, newdata = test_nNA)
rmse(test_nNA$charge_total, p.lm_it) #
#adding interaction terms with variable sex to highest AICc model
m.lm_it <- lm(charge_total ~ preperiod_any_visits + age + sex + any_ed_visits + any_ed_chronic_condition +
any_ed_injury + any_ed_skin_condition + any_ed_abdominal_pain + any_ed_back_pain +
any_ed_heart_or_chest_pain + any_ed_headache + any_ed_depression + charge_food_assistance +
charge_temporary_assistance + sex:any_ed_headache + sex:preperiod_any_visits +
sex:age + sex:any_ed_visits + sex:any_ed_chronic_condition + sex:any_ed_injury +
sex:any_ed_back_pain, train_nNA)
p.lm_it <- predict.lm(m.lm_it, newdata = test_nNA)
rmse(test_nNA$charge_total, p.lm_it) #
#adding esxplicit interactions, namely those interactions with sex that were found to be helpful in the lm model
m.fo_it <- lm(charge_total ~ preperiod_any_visits + age + sex + any_ed_visits + any_ed_chronic_condition +
any_ed_injury + any_ed_skin_condition + any_ed_abdominal_pain + any_ed_back_pain +
any_ed_heart_or_chest_pain + any_ed_headache + any_ed_depression + charge_food_assistance +
charge_temporary_assistance + sex:any_ed_headache + sex:preperiod_any_visits +
sex:age + sex:any_ed_visits + sex:any_ed_chronic_condition + sex:any_ed_injury +
sex:any_ed_back_pain, train_nNA)
#adding esxplicit interactions, namely those interactions with sex that were found to be helpful in the lm model
m.fo_it <- randomForest(charge_total ~ preperiod_any_visits + age + sex + any_ed_visits + any_ed_chronic_condition +
any_ed_injury + any_ed_skin_condition + any_ed_abdominal_pain + any_ed_back_pain +
any_ed_heart_or_chest_pain + any_ed_headache + any_ed_depression + charge_food_assistance +
charge_temporary_assistance + sex:any_ed_headache + sex:preperiod_any_visits +
sex:age + sex:any_ed_visits + sex:any_ed_chronic_condition + sex:any_ed_injury +
sex:any_ed_back_pain, train_nNA)
p.lm_fo <- predict(m.fo_it, newdata = test_nNA)
rmse(test_nNA$charge_total, p.lm_fo)
table(c("charge_total", "preperiod_any_visits", "age", "sex", "any_ed_visits", "any_ed_chronic_condition", "any_ed_injury",
"any_ed_skin_condition", "any_ed_abdominal_pain", "any_ed_back_pain", "any_ed_heart_or_chest_pain", "any_ed_headache",
"any_ed_depression", "any_ed_psychiatric_condition_or_substance_abuse", "food_assistance", "charge_food_assistance",
"temporary_assistance", "charge_temporary_assistance", "charge_total", "preperiod_any_visits", "age", "sex", "any_ed_visits",
"any_ed_chronic_condition", "any_ed_injury", "any_ed_skin_condition", "any_ed_abdominal_pain", "any_ed_back_pain",
"any_ed_heart_or_chest_pain", "any_ed_headache", "any_ed_depression", "charge_food_assistance", "charge_temporary_assistance"))
"temporary_assistance"))
ohieVariables_nNA2 <- drop_na(select(ohieVariables, !c("any_ed_psychiatric_condition_or_substance_abuse", "food_assistance",
"temporary_assistance")))
ohieVariables_nNA2 <- drop_na(ohieVariables2)
#dataframe with variables removed, that showed to decrease model performance
ohieVariables2 <- select(ohieVariables, !c("any_ed_psychiatric_condition_or_substance_abuse", "food_assistance",
"temporary_assistance"))
ohieVariables_nNA2 <- drop_na(ohieVariables2)
?randomForest
?cran_stats
install.packages("dlstats")
library(dlstats)
a <- cran_stats(c("MICE", "Amelia", "missForest", "Hmisc", "mi"))
View(a)
?cran_stats
if (!is.null(a)) {
head(a)
ggplot(a, aes(end, downloads, group=package, color=package)) +
geom_line() + geom_point(aes(shape=package))
}
?with
install.packages("Hmisc")
library(Hmisc)
?rmse
metrics::rmse(test_nNA$charge_total, p.lm_aic) #[1] 16700.77
modelr::rmse(test_nNA$charge_total, p.lm_aic) #[1] 16700.77
?drop_na
View(ohieVariables)
#mean substitution (with Hmisc)
ohieVariables_DepnNA <- drop_na(ohieVariables, any_of(charge_total))
#mean substitution (with Hmisc)
ohieVariables_DepnNA <- drop_na(ohieVariables, any_of("charge_total"))
save(dred.lm, "dred.lm")
#Data----
setwd("~/GitHub/BAna-DS")
save(dred.lm, "dred.lm")
save(dred.lm, "~/GitHub/BAna-DS/dred.lm")
save(dred.lm, "~/GitHub/BAna-DS")
save(dred.lm, file = "~/GitHub/BAna-DS/dred.lm")
save(dred.lm, file = "~/GitHub/BAna-DS/dredlm.RData")
saveRDS(dred.lm, file = "~/GitHub/BAna-DS/dredlm.rds")
